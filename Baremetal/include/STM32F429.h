/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     STM32F429.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     07. September 2018
 * @note     Generated by SVDConv V3.2.66 on Friday, 07.09.2018 14:46:47
 *           from File 'STM32F4_svd_V1.2/STM32F429.svd',
 *           last modified on Thursday, 12.10.2017 14:46:40
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup STM32F429
  * @{
  */


#ifndef STM32F429_H
#define STM32F429_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  STM32F429 Specific Interrupt Numbers  ========================================== */
  WWDG_IRQn                 =   0,              /*!< 0  Window Watchdog interrupt                                              */
  PVD_IRQn                  =   1,              /*!< 1  PVD through EXTI line detection interrupt                              */
  TAMP_STAMP_IRQn           =   2,              /*!< 2  Tamper and TimeStamp interrupts through the EXTI line                  */
  RTC_WKUP_IRQn             =   3,              /*!< 3  RTC Wakeup interrupt through the EXTI line                             */
  FLASH_IRQn                =   4,              /*!< 4  Flash global interrupt                                                 */
  RCC_IRQn                  =   5,              /*!< 5  RCC global interrupt                                                   */
  EXTI0_IRQn                =   6,              /*!< 6  EXTI Line0 interrupt                                                   */
  EXTI1_IRQn                =   7,              /*!< 7  EXTI Line1 interrupt                                                   */
  EXTI2_IRQn                =   8,              /*!< 8  EXTI Line2 interrupt                                                   */
  EXTI3_IRQn                =   9,              /*!< 9  EXTI Line3 interrupt                                                   */
  EXTI4_IRQn                =  10,              /*!< 10 EXTI Line4 interrupt                                                   */
  DMA1_Stream0_IRQn         =  11,              /*!< 11 DMA1 Stream0 global interrupt                                          */
  DMA1_Stream1_IRQn         =  12,              /*!< 12 DMA1 Stream1 global interrupt                                          */
  DMA1_Stream2_IRQn         =  13,              /*!< 13 DMA1 Stream2 global interrupt                                          */
  DMA1_Stream3_IRQn         =  14,              /*!< 14 DMA1 Stream3 global interrupt                                          */
  DMA1_Stream4_IRQn         =  15,              /*!< 15 DMA1 Stream4 global interrupt                                          */
  DMA1_Stream5_IRQn         =  16,              /*!< 16 DMA1 Stream5 global interrupt                                          */
  DMA1_Stream6_IRQn         =  17,              /*!< 17 DMA1 Stream6 global interrupt                                          */
  ADC_IRQn                  =  18,              /*!< 18 ADC2 global interrupts                                                 */
  CAN1_TX_IRQn              =  19,              /*!< 19 CAN1 TX interrupts                                                     */
  CAN1_RX0_IRQn             =  20,              /*!< 20 CAN1 RX0 interrupts                                                    */
  CAN1_RX1_IRQn             =  21,              /*!< 21 CAN1 RX1 interrupts                                                    */
  CAN1_SCE_IRQn             =  22,              /*!< 22 CAN1 SCE interrupt                                                     */
  EXTI9_5_IRQn              =  23,              /*!< 23 EXTI Line[9:5] interrupts                                              */
  TIM1_BRK_TIM9_IRQn        =  24,              /*!< 24 TIM1 Break interrupt and TIM9 global interrupt                         */
  TIM1_UP_TIM10_IRQn        =  25,              /*!< 25 TIM1 Update interrupt and TIM10 global interrupt                       */
  TIM1_TRG_COM_TIM11_IRQn   =  26,              /*!< 26 TIM1 Trigger and Commutation interrupts and TIM11 global
                                                     interrupt                                                                 */
  TIM1_CC_IRQn              =  27,              /*!< 27 TIM1 Capture Compare interrupt                                         */
  TIM2_IRQn                 =  28,              /*!< 28 TIM2 global interrupt                                                  */
  TIM3_IRQn                 =  29,              /*!< 29 TIM3 global interrupt                                                  */
  TIM4_IRQn                 =  30,              /*!< 30 TIM4 global interrupt                                                  */
  I2C1_EV_IRQn              =  31,              /*!< 31 I2C1 event interrupt                                                   */
  I2C1_ER_IRQn              =  32,              /*!< 32 I2C1 error interrupt                                                   */
  I2C2_EV_IRQn              =  33,              /*!< 33 I2C2 event interrupt                                                   */
  I2C2_ER_IRQn              =  34,              /*!< 34 I2C2 error interrupt                                                   */
  SPI1_IRQn                 =  35,              /*!< 35 SPI1 global interrupt                                                  */
  SPI2_IRQn                 =  36,              /*!< 36 SPI2 global interrupt                                                  */
  USART1_IRQn               =  37,              /*!< 37 USART1 global interrupt                                                */
  USART2_IRQn               =  38,              /*!< 38 USART2 global interrupt                                                */
  USART3_IRQn               =  39,              /*!< 39 USART3 global interrupt                                                */
  EXTI15_10_IRQn            =  40,              /*!< 40 EXTI Line[15:10] interrupts                                            */
  RTC_Alarm_IRQn            =  41,              /*!< 41 RTC Alarms (A and B) through EXTI line interrupt                       */
  OTG_FS_WKUP_IRQn          =  42,              /*!< 42 USB On-The-Go FS Wakeup through EXTI line interrupt                    */
  TIM8_BRK_TIM12_IRQn       =  43,              /*!< 43 TIM8 Break interrupt and TIM12 global interrupt                        */
  TIM8_UP_TIM13_IRQn        =  44,              /*!< 44 TIM8 Update interrupt and TIM13 global interrupt                       */
  TIM8_TRG_COM_TIM14_IRQn   =  45,              /*!< 45 TIM8 Trigger and Commutation interrupts and TIM14 global
                                                     interrupt                                                                 */
  TIM8_CC_IRQn              =  46,              /*!< 46 TIM8 Capture Compare interrupt                                         */
  DMA1_Stream7_IRQn         =  47,              /*!< 47 DMA1 Stream7 global interrupt                                          */
  FMC_IRQn                  =  48,              /*!< 48 FMC global interrupt                                                   */
  SDIO_IRQn                 =  49,              /*!< 49 SDIO global interrupt                                                  */
  TIM5_IRQn                 =  50,              /*!< 50 TIM5 global interrupt                                                  */
  SPI3_IRQn                 =  51,              /*!< 51 SPI3 global interrupt                                                  */
  UART4_IRQn                =  52,              /*!< 52 UART4 global interrupt                                                 */
  UART5_IRQn                =  53,              /*!< 53 UART5 global interrupt                                                 */
  TIM6_DAC_IRQn             =  54,              /*!< 54 TIM6 global interrupt, DAC1 and DAC2 underrun error interrupt          */
  TIM7_IRQn                 =  55,              /*!< 55 TIM7 global interrupt                                                  */
  DMA2_Stream0_IRQn         =  56,              /*!< 56 DMA2 Stream0 global interrupt                                          */
  DMA2_Stream1_IRQn         =  57,              /*!< 57 DMA2 Stream1 global interrupt                                          */
  DMA2_Stream2_IRQn         =  58,              /*!< 58 DMA2 Stream2 global interrupt                                          */
  DMA2_Stream3_IRQn         =  59,              /*!< 59 DMA2 Stream3 global interrupt                                          */
  DMA2_Stream4_IRQn         =  60,              /*!< 60 DMA2 Stream4 global interrupt                                          */
  ETH_IRQn                  =  61,              /*!< 61 Ethernet global interrupt                                              */
  ETH_WKUP_IRQn             =  62,              /*!< 62 Ethernet Wakeup through EXTI line interrupt                            */
  CAN2_TX_IRQn              =  63,              /*!< 63 CAN2 TX interrupts                                                     */
  CAN2_RX0_IRQn             =  64,              /*!< 64 CAN2 RX0 interrupts                                                    */
  CAN2_RX1_IRQn             =  65,              /*!< 65 CAN2 RX1 interrupts                                                    */
  CAN2_SCE_IRQn             =  66,              /*!< 66 CAN2 SCE interrupt                                                     */
  OTG_FS_IRQn               =  67,              /*!< 67 USB On The Go FS global interrupt                                      */
  DMA2_Stream5_IRQn         =  68,              /*!< 68 DMA2 Stream5 global interrupt                                          */
  DMA2_Stream6_IRQn         =  69,              /*!< 69 DMA2 Stream6 global interrupt                                          */
  DMA2_Stream7_IRQn         =  70,              /*!< 70 DMA2 Stream7 global interrupt                                          */
  USART6_IRQn               =  71,              /*!< 71 USART6 global interrupt                                                */
  I2C3_EV_IRQn              =  72,              /*!< 72 I2C3 event interrupt                                                   */
  I2C3_ER_IRQn              =  73,              /*!< 73 I2C3 error interrupt                                                   */
  OTG_HS_EP1_OUT_IRQn       =  74,              /*!< 74 USB On The Go HS End Point 1 Out global interrupt                      */
  OTG_HS_EP1_IN_IRQn        =  75,              /*!< 75 USB On The Go HS End Point 1 In global interrupt                       */
  OTG_HS_WKUP_IRQn          =  76,              /*!< 76 USB On The Go HS Wakeup through EXTI interrupt                         */
  OTG_HS_IRQn               =  77,              /*!< 77 USB On The Go HS global interrupt                                      */
  DCMI_IRQn                 =  78,              /*!< 78 DCMI global interrupt                                                  */
  CRYP_IRQn                 =  79,              /*!< 79 CRYP crypto global interrupt                                           */
  HASH_RNG_IRQn             =  80,              /*!< 80 Hash and Rng global interrupt                                          */
  FPU_IRQn                  =  81,              /*!< 81 FPU interrupt                                                          */
  UART7_IRQn                =  82,              /*!< 82 UART 7 global interrupt                                                */
  UART8_IRQn                =  83,              /*!< 83 UART 8 global interrupt                                                */
  SPI4_IRQn                 =  84,              /*!< 84 SPI 4 global interrupt                                                 */
  SPI5_IRQn                 =  85,              /*!< 85 SPI 5 global interrupt                                                 */
  SPI6_IRQn                 =  86,              /*!< 86 SPI 6 global interrupt                                                 */
  SAI1_IRQn                 =  87,              /*!< 87 SAI1 global interrupt                                                  */
  LCD_TFT_IRQn              =  88,              /*!< 88 LTDC global interrupt                                                  */
  LCD_TFT_1_IRQn            =  89,              /*!< 89 LTDC global error interrupt                                            */
  DMA2D_IRQn                =  90               /*!< 90 DMA2D global interrupt                                                 */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0100U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */
#define __FPU_PRESENT                  0        /*!< FPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_STM32F429.h"                   /*!< STM32F429 System                                                          */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random number generator (RNG)
  */

typedef struct {                                /*!< (@ 0x50060800) RNG Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000004) status register                                            */
  __IM  uint32_t  DR;                           /*!< (@ 0x00000008) data register                                              */
} RNG_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           HASH                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Hash processor (HASH)
  */

typedef struct {                                /*!< (@ 0x50060400) HASH Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __IOM uint32_t  DIN;                          /*!< (@ 0x00000004) data input register                                        */
  __IOM uint32_t  STR;                          /*!< (@ 0x00000008) start register                                             */
  __IM  uint32_t  HR0;                          /*!< (@ 0x0000000C) digest registers                                           */
  __IM  uint32_t  HR1;                          /*!< (@ 0x00000010) digest registers                                           */
  __IM  uint32_t  HR2;                          /*!< (@ 0x00000014) digest registers                                           */
  __IM  uint32_t  HR3;                          /*!< (@ 0x00000018) digest registers                                           */
  __IM  uint32_t  HR4;                          /*!< (@ 0x0000001C) digest registers                                           */
  __IOM uint32_t  IMR;                          /*!< (@ 0x00000020) interrupt enable register                                  */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000024) status register                                            */
  __IM  uint32_t  RESERVED[52];
  __IOM uint32_t  CSR0;                         /*!< (@ 0x000000F8) context swap registers                                     */
  __IOM uint32_t  CSR1;                         /*!< (@ 0x000000FC) context swap registers                                     */
  __IOM uint32_t  CSR2;                         /*!< (@ 0x00000100) context swap registers                                     */
  __IOM uint32_t  CSR3;                         /*!< (@ 0x00000104) context swap registers                                     */
  __IOM uint32_t  CSR4;                         /*!< (@ 0x00000108) context swap registers                                     */
  __IOM uint32_t  CSR5;                         /*!< (@ 0x0000010C) context swap registers                                     */
  __IOM uint32_t  CSR6;                         /*!< (@ 0x00000110) context swap registers                                     */
  __IOM uint32_t  CSR7;                         /*!< (@ 0x00000114) context swap registers                                     */
  __IOM uint32_t  CSR8;                         /*!< (@ 0x00000118) context swap registers                                     */
  __IOM uint32_t  CSR9;                         /*!< (@ 0x0000011C) context swap registers                                     */
  __IOM uint32_t  CSR10;                        /*!< (@ 0x00000120) context swap registers                                     */
  __IOM uint32_t  CSR11;                        /*!< (@ 0x00000124) context swap registers                                     */
  __IOM uint32_t  CSR12;                        /*!< (@ 0x00000128) context swap registers                                     */
  __IOM uint32_t  CSR13;                        /*!< (@ 0x0000012C) context swap registers                                     */
  __IOM uint32_t  CSR14;                        /*!< (@ 0x00000130) context swap registers                                     */
  __IOM uint32_t  CSR15;                        /*!< (@ 0x00000134) context swap registers                                     */
  __IOM uint32_t  CSR16;                        /*!< (@ 0x00000138) context swap registers                                     */
  __IOM uint32_t  CSR17;                        /*!< (@ 0x0000013C) context swap registers                                     */
  __IOM uint32_t  CSR18;                        /*!< (@ 0x00000140) context swap registers                                     */
  __IOM uint32_t  CSR19;                        /*!< (@ 0x00000144) context swap registers                                     */
  __IOM uint32_t  CSR20;                        /*!< (@ 0x00000148) context swap registers                                     */
  __IOM uint32_t  CSR21;                        /*!< (@ 0x0000014C) context swap registers                                     */
  __IOM uint32_t  CSR22;                        /*!< (@ 0x00000150) context swap registers                                     */
  __IOM uint32_t  CSR23;                        /*!< (@ 0x00000154) context swap registers                                     */
  __IOM uint32_t  CSR24;                        /*!< (@ 0x00000158) context swap registers                                     */
  __IOM uint32_t  CSR25;                        /*!< (@ 0x0000015C) context swap registers                                     */
  __IOM uint32_t  CSR26;                        /*!< (@ 0x00000160) context swap registers                                     */
  __IOM uint32_t  CSR27;                        /*!< (@ 0x00000164) context swap registers                                     */
  __IOM uint32_t  CSR28;                        /*!< (@ 0x00000168) context swap registers                                     */
  __IOM uint32_t  CSR29;                        /*!< (@ 0x0000016C) context swap registers                                     */
  __IOM uint32_t  CSR30;                        /*!< (@ 0x00000170) context swap registers                                     */
  __IOM uint32_t  CSR31;                        /*!< (@ 0x00000174) context swap registers                                     */
  __IOM uint32_t  CSR32;                        /*!< (@ 0x00000178) context swap registers                                     */
  __IOM uint32_t  CSR33;                        /*!< (@ 0x0000017C) context swap registers                                     */
  __IOM uint32_t  CSR34;                        /*!< (@ 0x00000180) context swap registers                                     */
  __IOM uint32_t  CSR35;                        /*!< (@ 0x00000184) context swap registers                                     */
  __IOM uint32_t  CSR36;                        /*!< (@ 0x00000188) context swap registers                                     */
  __IOM uint32_t  CSR37;                        /*!< (@ 0x0000018C) context swap registers                                     */
  __IOM uint32_t  CSR38;                        /*!< (@ 0x00000190) context swap registers                                     */
  __IOM uint32_t  CSR39;                        /*!< (@ 0x00000194) context swap registers                                     */
  __IOM uint32_t  CSR40;                        /*!< (@ 0x00000198) context swap registers                                     */
  __IOM uint32_t  CSR41;                        /*!< (@ 0x0000019C) context swap registers                                     */
  __IOM uint32_t  CSR42;                        /*!< (@ 0x000001A0) context swap registers                                     */
  __IOM uint32_t  CSR43;                        /*!< (@ 0x000001A4) context swap registers                                     */
  __IOM uint32_t  CSR44;                        /*!< (@ 0x000001A8) context swap registers                                     */
  __IOM uint32_t  CSR45;                        /*!< (@ 0x000001AC) context swap registers                                     */
  __IOM uint32_t  CSR46;                        /*!< (@ 0x000001B0) context swap registers                                     */
  __IOM uint32_t  CSR47;                        /*!< (@ 0x000001B4) context swap registers                                     */
  __IOM uint32_t  CSR48;                        /*!< (@ 0x000001B8) context swap registers                                     */
  __IOM uint32_t  CSR49;                        /*!< (@ 0x000001BC) context swap registers                                     */
  __IOM uint32_t  CSR50;                        /*!< (@ 0x000001C0) context swap registers                                     */
  __IOM uint32_t  CSR51;                        /*!< (@ 0x000001C4) context swap registers                                     */
  __IOM uint32_t  CSR52;                        /*!< (@ 0x000001C8) context swap registers                                     */
  __IOM uint32_t  CSR53;                        /*!< (@ 0x000001CC) context swap registers                                     */
  __IM  uint32_t  RESERVED1[80];
  __IM  uint32_t  HASH_HR0;                     /*!< (@ 0x00000310) HASH digest register                                       */
  __IM  uint32_t  HASH_HR1;                     /*!< (@ 0x00000314) read-only                                                  */
  __IM  uint32_t  HASH_HR2;                     /*!< (@ 0x00000318) read-only                                                  */
  __IM  uint32_t  HASH_HR3;                     /*!< (@ 0x0000031C) read-only                                                  */
  __IM  uint32_t  HASH_HR4;                     /*!< (@ 0x00000320) read-only                                                  */
  __IM  uint32_t  HASH_HR5;                     /*!< (@ 0x00000324) read-only                                                  */
  __IM  uint32_t  HASH_HR6;                     /*!< (@ 0x00000328) read-only                                                  */
  __IM  uint32_t  HASH_HR7;                     /*!< (@ 0x0000032C) read-only                                                  */
} HASH_Type;                                    /*!< Size = 816 (0x330)                                                        */



/* =========================================================================================================================== */
/* ================                                           CRYP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cryptographic processor (CRYP)
  */

typedef struct {                                /*!< (@ 0x50060000) CRYP Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __IM  uint32_t  SR;                           /*!< (@ 0x00000004) status register                                            */
  __IOM uint32_t  DIN;                          /*!< (@ 0x00000008) data input register                                        */
  __IM  uint32_t  DOUT;                         /*!< (@ 0x0000000C) data output register                                       */
  __IOM uint32_t  DMACR;                        /*!< (@ 0x00000010) DMA control register                                       */
  __IOM uint32_t  IMSCR;                        /*!< (@ 0x00000014) interrupt mask set/clear register                          */
  __IM  uint32_t  RISR;                         /*!< (@ 0x00000018) raw interrupt status register                              */
  __IM  uint32_t  MISR;                         /*!< (@ 0x0000001C) masked interrupt status register                           */
  __OM  uint32_t  K0LR;                         /*!< (@ 0x00000020) key registers                                              */
  __OM  uint32_t  K0RR;                         /*!< (@ 0x00000024) key registers                                              */
  __OM  uint32_t  K1LR;                         /*!< (@ 0x00000028) key registers                                              */
  __OM  uint32_t  K1RR;                         /*!< (@ 0x0000002C) key registers                                              */
  __OM  uint32_t  K2LR;                         /*!< (@ 0x00000030) key registers                                              */
  __OM  uint32_t  K2RR;                         /*!< (@ 0x00000034) key registers                                              */
  __OM  uint32_t  K3LR;                         /*!< (@ 0x00000038) key registers                                              */
  __OM  uint32_t  K3RR;                         /*!< (@ 0x0000003C) key registers                                              */
  __IOM uint32_t  IV0LR;                        /*!< (@ 0x00000040) initialization vector registers                            */
  __IOM uint32_t  IV0RR;                        /*!< (@ 0x00000044) initialization vector registers                            */
  __IOM uint32_t  IV1LR;                        /*!< (@ 0x00000048) initialization vector registers                            */
  __IOM uint32_t  IV1RR;                        /*!< (@ 0x0000004C) initialization vector registers                            */
  __IOM uint32_t  CSGCMCCM0R;                   /*!< (@ 0x00000050) context swap register                                      */
  __IOM uint32_t  CSGCMCCM1R;                   /*!< (@ 0x00000054) context swap register                                      */
  __IOM uint32_t  CSGCMCCM2R;                   /*!< (@ 0x00000058) context swap register                                      */
  __IOM uint32_t  CSGCMCCM3R;                   /*!< (@ 0x0000005C) context swap register                                      */
  __IOM uint32_t  CSGCMCCM4R;                   /*!< (@ 0x00000060) context swap register                                      */
  __IOM uint32_t  CSGCMCCM5R;                   /*!< (@ 0x00000064) context swap register                                      */
  __IOM uint32_t  CSGCMCCM6R;                   /*!< (@ 0x00000068) context swap register                                      */
  __IOM uint32_t  CSGCMCCM7R;                   /*!< (@ 0x0000006C) context swap register                                      */
  __IOM uint32_t  CSGCM0R;                      /*!< (@ 0x00000070) context swap register                                      */
  __IOM uint32_t  CSGCM1R;                      /*!< (@ 0x00000074) context swap register                                      */
  __IOM uint32_t  CSGCM2R;                      /*!< (@ 0x00000078) context swap register                                      */
  __IOM uint32_t  CSGCM3R;                      /*!< (@ 0x0000007C) context swap register                                      */
  __IOM uint32_t  CSGCM4R;                      /*!< (@ 0x00000080) context swap register                                      */
  __IOM uint32_t  CSGCM5R;                      /*!< (@ 0x00000084) context swap register                                      */
  __IOM uint32_t  CSGCM6R;                      /*!< (@ 0x00000088) context swap register                                      */
  __IOM uint32_t  CSGCM7R;                      /*!< (@ 0x0000008C) context swap register                                      */
} CRYP_Type;                                    /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                           DCMI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital camera interface (DCMI)
  */

typedef struct {                                /*!< (@ 0x50050000) DCMI Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register 1                                         */
  __IM  uint32_t  SR;                           /*!< (@ 0x00000004) status register                                            */
  __IM  uint32_t  RIS;                          /*!< (@ 0x00000008) raw interrupt status register                              */
  __IOM uint32_t  IER;                          /*!< (@ 0x0000000C) interrupt enable register                                  */
  __IM  uint32_t  MIS;                          /*!< (@ 0x00000010) masked interrupt status register                           */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000014) interrupt clear register                                   */
  __IOM uint32_t  ESCR;                         /*!< (@ 0x00000018) embedded synchronization code register                     */
  __IOM uint32_t  ESUR;                         /*!< (@ 0x0000001C) embedded synchronization unmask register                   */
  __IOM uint32_t  CWSTRT;                       /*!< (@ 0x00000020) crop window start                                          */
  __IOM uint32_t  CWSIZE;                       /*!< (@ 0x00000024) crop window size                                           */
  __IM  uint32_t  DR;                           /*!< (@ 0x00000028) data register                                              */
} DCMI_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flexible memory controller (FMC)
  */

typedef struct {                                /*!< (@ 0xA0000000) FMC Structure                                              */
  __IOM uint32_t  BCR1;                         /*!< (@ 0x00000000) SRAM/NOR-Flash chip-select control register 1              */
  __IOM uint32_t  BTR1;                         /*!< (@ 0x00000004) SRAM/NOR-Flash chip-select timing register 1               */
  __IOM uint32_t  BCR2;                         /*!< (@ 0x00000008) SRAM/NOR-Flash chip-select control register 2              */
  __IOM uint32_t  BTR2;                         /*!< (@ 0x0000000C) SRAM/NOR-Flash chip-select timing register 2               */
  __IOM uint32_t  BCR3;                         /*!< (@ 0x00000010) SRAM/NOR-Flash chip-select control register 3              */
  __IOM uint32_t  BTR3;                         /*!< (@ 0x00000014) SRAM/NOR-Flash chip-select timing register 3               */
  __IOM uint32_t  BCR4;                         /*!< (@ 0x00000018) SRAM/NOR-Flash chip-select control register 4              */
  __IOM uint32_t  BTR4;                         /*!< (@ 0x0000001C) SRAM/NOR-Flash chip-select timing register 4               */
  __IM  uint32_t  RESERVED[16];
  __IOM uint32_t  PCR2;                         /*!< (@ 0x00000060) PC Card/NAND Flash control register 2                      */
  __IOM uint32_t  SR2;                          /*!< (@ 0x00000064) FIFO status and interrupt register 2                       */
  __IOM uint32_t  PMEM2;                        /*!< (@ 0x00000068) Common memory space timing register 2                      */
  __IOM uint32_t  PATT2;                        /*!< (@ 0x0000006C) Attribute memory space timing register 2                   */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  ECCR2;                        /*!< (@ 0x00000074) ECC result register 2                                      */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  PCR3;                         /*!< (@ 0x00000080) PC Card/NAND Flash control register 3                      */
  __IOM uint32_t  SR3;                          /*!< (@ 0x00000084) FIFO status and interrupt register 3                       */
  __IOM uint32_t  PMEM3;                        /*!< (@ 0x00000088) Common memory space timing register 3                      */
  __IOM uint32_t  PATT3;                        /*!< (@ 0x0000008C) Attribute memory space timing register 3                   */
  __IM  uint32_t  RESERVED3;
  __IM  uint32_t  ECCR3;                        /*!< (@ 0x00000094) ECC result register 3                                      */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  PCR4;                         /*!< (@ 0x000000A0) PC Card/NAND Flash control register 4                      */
  __IOM uint32_t  SR4;                          /*!< (@ 0x000000A4) FIFO status and interrupt register 4                       */
  __IOM uint32_t  PMEM4;                        /*!< (@ 0x000000A8) Common memory space timing register 4                      */
  __IOM uint32_t  PATT4;                        /*!< (@ 0x000000AC) Attribute memory space timing register 4                   */
  __IOM uint32_t  PIO4;                         /*!< (@ 0x000000B0) I/O space timing register 4                                */
  __IM  uint32_t  RESERVED5[20];
  
  union {
    __IOM uint32_t BWTR1;                       /*!< (@ 0x00000104) SRAM/NOR-Flash write timing registers 1                    */
    __IOM uint32_t BWTR3;                       /*!< (@ 0x00000104) SRAM/NOR-Flash write timing registers 3                    */
  };
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t BWTR2;                       /*!< (@ 0x0000010C) SRAM/NOR-Flash write timing registers 2                    */
    __IOM uint32_t BWTR4;                       /*!< (@ 0x0000010C) SRAM/NOR-Flash write timing registers 4                    */
  };
  __IM  uint32_t  RESERVED7[12];
  __IOM uint32_t  SDCR1;                        /*!< (@ 0x00000140) SDRAM Control Register 1                                   */
  __IOM uint32_t  SDCR2;                        /*!< (@ 0x00000144) SDRAM Control Register 2                                   */
  __IOM uint32_t  SDTR1;                        /*!< (@ 0x00000148) SDRAM Timing register 1                                    */
  __IOM uint32_t  SDTR2;                        /*!< (@ 0x0000014C) SDRAM Timing register 2                                    */
  __IOM uint32_t  SDCMR;                        /*!< (@ 0x00000150) SDRAM Command Mode register                                */
  __IOM uint32_t  SDRTR;                        /*!< (@ 0x00000154) SDRAM Refresh Timer register                               */
  __IM  uint32_t  SDSR;                         /*!< (@ 0x00000158) SDRAM Status register                                      */
} FMC_Type;                                     /*!< Size = 348 (0x15c)                                                        */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0xE0042000) DBG Structure                                              */
  __IM  uint32_t  DBGMCU_IDCODE;                /*!< (@ 0x00000000) IDCODE                                                     */
  __IOM uint32_t  DBGMCU_CR;                    /*!< (@ 0x00000004) Control Register                                           */
  __IOM uint32_t  DBGMCU_APB1_FZ;               /*!< (@ 0x00000008) Debug MCU APB1 Freeze registe                              */
  __IOM uint32_t  DBGMCU_APB2_FZ;               /*!< (@ 0x0000000C) Debug MCU APB2 Freeze registe                              */
} DBG_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA2)
  */

typedef struct {                                /*!< (@ 0x40026400) DMA2 Structure                                             */
  __IM  uint32_t  LISR;                         /*!< (@ 0x00000000) low interrupt status register                              */
  __IM  uint32_t  HISR;                         /*!< (@ 0x00000004) high interrupt status register                             */
  __IOM uint32_t  LIFCR;                        /*!< (@ 0x00000008) low interrupt flag clear register                          */
  __IOM uint32_t  HIFCR;                        /*!< (@ 0x0000000C) high interrupt flag clear register                         */
  __IOM uint32_t  S0CR;                         /*!< (@ 0x00000010) stream x configuration register                            */
  __IOM uint32_t  S0NDTR;                       /*!< (@ 0x00000014) stream x number of data register                           */
  __IOM uint32_t  S0PAR;                        /*!< (@ 0x00000018) stream x peripheral address register                       */
  __IOM uint32_t  S0M0AR;                       /*!< (@ 0x0000001C) stream x memory 0 address register                         */
  __IOM uint32_t  S0M1AR;                       /*!< (@ 0x00000020) stream x memory 1 address register                         */
  __IOM uint32_t  S0FCR;                        /*!< (@ 0x00000024) stream x FIFO control register                             */
  __IOM uint32_t  S1CR;                         /*!< (@ 0x00000028) stream x configuration register                            */
  __IOM uint32_t  S1NDTR;                       /*!< (@ 0x0000002C) stream x number of data register                           */
  __IOM uint32_t  S1PAR;                        /*!< (@ 0x00000030) stream x peripheral address register                       */
  __IOM uint32_t  S1M0AR;                       /*!< (@ 0x00000034) stream x memory 0 address register                         */
  __IOM uint32_t  S1M1AR;                       /*!< (@ 0x00000038) stream x memory 1 address register                         */
  __IOM uint32_t  S1FCR;                        /*!< (@ 0x0000003C) stream x FIFO control register                             */
  __IOM uint32_t  S2CR;                         /*!< (@ 0x00000040) stream x configuration register                            */
  __IOM uint32_t  S2NDTR;                       /*!< (@ 0x00000044) stream x number of data register                           */
  __IOM uint32_t  S2PAR;                        /*!< (@ 0x00000048) stream x peripheral address register                       */
  __IOM uint32_t  S2M0AR;                       /*!< (@ 0x0000004C) stream x memory 0 address register                         */
  __IOM uint32_t  S2M1AR;                       /*!< (@ 0x00000050) stream x memory 1 address register                         */
  __IOM uint32_t  S2FCR;                        /*!< (@ 0x00000054) stream x FIFO control register                             */
  __IOM uint32_t  S3CR;                         /*!< (@ 0x00000058) stream x configuration register                            */
  __IOM uint32_t  S3NDTR;                       /*!< (@ 0x0000005C) stream x number of data register                           */
  __IOM uint32_t  S3PAR;                        /*!< (@ 0x00000060) stream x peripheral address register                       */
  __IOM uint32_t  S3M0AR;                       /*!< (@ 0x00000064) stream x memory 0 address register                         */
  __IOM uint32_t  S3M1AR;                       /*!< (@ 0x00000068) stream x memory 1 address register                         */
  __IOM uint32_t  S3FCR;                        /*!< (@ 0x0000006C) stream x FIFO control register                             */
  __IOM uint32_t  S4CR;                         /*!< (@ 0x00000070) stream x configuration register                            */
  __IOM uint32_t  S4NDTR;                       /*!< (@ 0x00000074) stream x number of data register                           */
  __IOM uint32_t  S4PAR;                        /*!< (@ 0x00000078) stream x peripheral address register                       */
  __IOM uint32_t  S4M0AR;                       /*!< (@ 0x0000007C) stream x memory 0 address register                         */
  __IOM uint32_t  S4M1AR;                       /*!< (@ 0x00000080) stream x memory 1 address register                         */
  __IOM uint32_t  S4FCR;                        /*!< (@ 0x00000084) stream x FIFO control register                             */
  __IOM uint32_t  S5CR;                         /*!< (@ 0x00000088) stream x configuration register                            */
  __IOM uint32_t  S5NDTR;                       /*!< (@ 0x0000008C) stream x number of data register                           */
  __IOM uint32_t  S5PAR;                        /*!< (@ 0x00000090) stream x peripheral address register                       */
  __IOM uint32_t  S5M0AR;                       /*!< (@ 0x00000094) stream x memory 0 address register                         */
  __IOM uint32_t  S5M1AR;                       /*!< (@ 0x00000098) stream x memory 1 address register                         */
  __IOM uint32_t  S5FCR;                        /*!< (@ 0x0000009C) stream x FIFO control register                             */
  __IOM uint32_t  S6CR;                         /*!< (@ 0x000000A0) stream x configuration register                            */
  __IOM uint32_t  S6NDTR;                       /*!< (@ 0x000000A4) stream x number of data register                           */
  __IOM uint32_t  S6PAR;                        /*!< (@ 0x000000A8) stream x peripheral address register                       */
  __IOM uint32_t  S6M0AR;                       /*!< (@ 0x000000AC) stream x memory 0 address register                         */
  __IOM uint32_t  S6M1AR;                       /*!< (@ 0x000000B0) stream x memory 1 address register                         */
  __IOM uint32_t  S6FCR;                        /*!< (@ 0x000000B4) stream x FIFO control register                             */
  __IOM uint32_t  S7CR;                         /*!< (@ 0x000000B8) stream x configuration register                            */
  __IOM uint32_t  S7NDTR;                       /*!< (@ 0x000000BC) stream x number of data register                           */
  __IOM uint32_t  S7PAR;                        /*!< (@ 0x000000C0) stream x peripheral address register                       */
  __IOM uint32_t  S7M0AR;                       /*!< (@ 0x000000C4) stream x memory 0 address register                         */
  __IOM uint32_t  S7M1AR;                       /*!< (@ 0x000000C8) stream x memory 1 address register                         */
  __IOM uint32_t  S7FCR;                        /*!< (@ 0x000000CC) stream x FIFO control register                             */
} DMA2_Type;                                    /*!< Size = 208 (0xd0)                                                         */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40023800) RCC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) clock control register                                     */
  __IOM uint32_t  PLLCFGR;                      /*!< (@ 0x00000004) PLL configuration register                                 */
  __IOM uint32_t  CFGR;                         /*!< (@ 0x00000008) clock configuration register                               */
  __IOM uint32_t  CIR;                          /*!< (@ 0x0000000C) clock interrupt register                                   */
  __IOM uint32_t  AHB1RSTR;                     /*!< (@ 0x00000010) AHB1 peripheral reset register                             */
  __IOM uint32_t  AHB2RSTR;                     /*!< (@ 0x00000014) AHB2 peripheral reset register                             */
  __IOM uint32_t  AHB3RSTR;                     /*!< (@ 0x00000018) AHB3 peripheral reset register                             */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  APB1RSTR;                     /*!< (@ 0x00000020) APB1 peripheral reset register                             */
  __IOM uint32_t  APB2RSTR;                     /*!< (@ 0x00000024) APB2 peripheral reset register                             */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  AHB1ENR;                      /*!< (@ 0x00000030) AHB1 peripheral clock register                             */
  __IOM uint32_t  AHB2ENR;                      /*!< (@ 0x00000034) AHB2 peripheral clock enable register                      */
  __IOM uint32_t  AHB3ENR;                      /*!< (@ 0x00000038) AHB3 peripheral clock enable register                      */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  APB1ENR;                      /*!< (@ 0x00000040) APB1 peripheral clock enable register                      */
  __IOM uint32_t  APB2ENR;                      /*!< (@ 0x00000044) APB2 peripheral clock enable register                      */
  __IM  uint32_t  RESERVED3[2];
  __IOM uint32_t  AHB1LPENR;                    /*!< (@ 0x00000050) AHB1 peripheral clock enable in low power mode
                                                                    register                                                   */
  __IOM uint32_t  AHB2LPENR;                    /*!< (@ 0x00000054) AHB2 peripheral clock enable in low power mode
                                                                    register                                                   */
  __IOM uint32_t  AHB3LPENR;                    /*!< (@ 0x00000058) AHB3 peripheral clock enable in low power mode
                                                                    register                                                   */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  APB1LPENR;                    /*!< (@ 0x00000060) APB1 peripheral clock enable in low power mode
                                                                    register                                                   */
  __IOM uint32_t  APB2LPENR;                    /*!< (@ 0x00000064) APB2 peripheral clock enabled in low power mode
                                                                    register                                                   */
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  BDCR;                         /*!< (@ 0x00000070) Backup domain control register                             */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000074) clock control & status register                            */
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  SSCGR;                        /*!< (@ 0x00000080) spread spectrum clock generation register                  */
  __IOM uint32_t  PLLI2SCFGR;                   /*!< (@ 0x00000084) PLLI2S configuration register                              */
  __IOM uint32_t  PLLSAICFGR;                   /*!< (@ 0x00000088) RCC PLL configuration register                             */
  __IOM uint32_t  DCKCFGR;                      /*!< (@ 0x0000008C) RCC Dedicated Clock Configuration Register                 */
} RCC_Type;                                     /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                           GPIOK                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOK)
  */

typedef struct {                                /*!< (@ 0x40022800) GPIOK Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
} GPIOK_Type;                                   /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOB)
  */

typedef struct {                                /*!< (@ 0x40020400) GPIOB Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
} GPIOB_Type;                                   /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40020000) GPIOA Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
} GPIOA_Type;                                   /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40013800) SYSCFG Structure                                           */
  __IOM uint32_t  MEMRM;                        /*!< (@ 0x00000000) memory remap register                                      */
  __IOM uint32_t  PMC;                          /*!< (@ 0x00000004) peripheral mode configuration register                     */
  __IOM uint32_t  EXTICR1;                      /*!< (@ 0x00000008) external interrupt configuration register 1                */
  __IOM uint32_t  EXTICR2;                      /*!< (@ 0x0000000C) external interrupt configuration register 2                */
  __IOM uint32_t  EXTICR3;                      /*!< (@ 0x00000010) external interrupt configuration register 3                */
  __IOM uint32_t  EXTICR4;                      /*!< (@ 0x00000014) external interrupt configuration register 4                */
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  CMPCR;                        /*!< (@ 0x00000020) Compensation cell control register                         */
} SYSCFG_Type;                                  /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x0000000C) data register                                              */
  __IOM uint32_t  CRCPR;                        /*!< (@ 0x00000010) CRC polynomial register                                    */
  __IM  uint32_t  RXCRCR;                       /*!< (@ 0x00000014) RX CRC register                                            */
  __IM  uint32_t  TXCRCR;                       /*!< (@ 0x00000018) TX CRC register                                            */
  __IOM uint32_t  I2SCFGR;                      /*!< (@ 0x0000001C) I2S configuration register                                 */
  __IOM uint32_t  I2SPR;                        /*!< (@ 0x00000020) I2S prescaler register                                     */
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SDIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure digital input/output  interface (SDIO)
  */

typedef struct {                                /*!< (@ 0x40012C00) SDIO Structure                                             */
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) power control register                                     */
  __IOM uint32_t  CLKCR;                        /*!< (@ 0x00000004) SDI clock control register                                 */
  __IOM uint32_t  ARG;                          /*!< (@ 0x00000008) argument register                                          */
  __IOM uint32_t  CMD;                          /*!< (@ 0x0000000C) command register                                           */
  __IM  uint32_t  RESPCMD;                      /*!< (@ 0x00000010) command response register                                  */
  __IM  uint32_t  RESP1;                        /*!< (@ 0x00000014) response 1..4 register                                     */
  __IM  uint32_t  RESP2;                        /*!< (@ 0x00000018) response 1..4 register                                     */
  __IM  uint32_t  RESP3;                        /*!< (@ 0x0000001C) response 1..4 register                                     */
  __IM  uint32_t  RESP4;                        /*!< (@ 0x00000020) response 1..4 register                                     */
  __IOM uint32_t  DTIMER;                       /*!< (@ 0x00000024) data timer register                                        */
  __IOM uint32_t  DLEN;                         /*!< (@ 0x00000028) data length register                                       */
  __IOM uint32_t  DCTRL;                        /*!< (@ 0x0000002C) data control register                                      */
  __IM  uint32_t  DCOUNT;                       /*!< (@ 0x00000030) data counter register                                      */
  __IM  uint32_t  STA;                          /*!< (@ 0x00000034) status register                                            */
  __IOM uint32_t  ICR;                          /*!< (@ 0x00000038) interrupt clear register                                   */
  __IOM uint32_t  MASK;                         /*!< (@ 0x0000003C) mask register                                              */
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  FIFOCNT;                      /*!< (@ 0x00000048) FIFO counter register                                      */
  __IM  uint32_t  RESERVED1[13];
  __IOM uint32_t  FIFO;                         /*!< (@ 0x00000080) data FIFO register                                         */
} SDIO_Type;                                    /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC1)
  */

typedef struct {                                /*!< (@ 0x40012000) ADC1 Structure                                             */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) status register                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000004) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000008) control register 2                                         */
  __IOM uint32_t  SMPR1;                        /*!< (@ 0x0000000C) sample time register 1                                     */
  __IOM uint32_t  SMPR2;                        /*!< (@ 0x00000010) sample time register 2                                     */
  __IOM uint32_t  JOFR1;                        /*!< (@ 0x00000014) injected channel data offset register x                    */
  __IOM uint32_t  JOFR2;                        /*!< (@ 0x00000018) injected channel data offset register x                    */
  __IOM uint32_t  JOFR3;                        /*!< (@ 0x0000001C) injected channel data offset register x                    */
  __IOM uint32_t  JOFR4;                        /*!< (@ 0x00000020) injected channel data offset register x                    */
  __IOM uint32_t  HTR;                          /*!< (@ 0x00000024) watchdog higher threshold register                         */
  __IOM uint32_t  LTR;                          /*!< (@ 0x00000028) watchdog lower threshold register                          */
  __IOM uint32_t  SQR1;                         /*!< (@ 0x0000002C) regular sequence register 1                                */
  __IOM uint32_t  SQR2;                         /*!< (@ 0x00000030) regular sequence register 2                                */
  __IOM uint32_t  SQR3;                         /*!< (@ 0x00000034) regular sequence register 3                                */
  __IOM uint32_t  JSQR;                         /*!< (@ 0x00000038) injected sequence register                                 */
  __IM  uint32_t  JDR1;                         /*!< (@ 0x0000003C) injected data register x                                   */
  __IM  uint32_t  JDR2;                         /*!< (@ 0x00000040) injected data register x                                   */
  __IM  uint32_t  JDR3;                         /*!< (@ 0x00000044) injected data register x                                   */
  __IM  uint32_t  JDR4;                         /*!< (@ 0x00000048) injected data register x                                   */
  __IM  uint32_t  DR;                           /*!< (@ 0x0000004C) regular data register                                      */
} ADC1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART6                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (USART6)
  */

typedef struct {                                /*!< (@ 0x40011400) USART6 Structure                                           */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) Status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) Data register                                              */
  __IOM uint32_t  BRR;                          /*!< (@ 0x00000008) Baud rate register                                         */
  __IOM uint32_t  CR1;                          /*!< (@ 0x0000000C) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000010) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000014) Control register 3                                         */
  __IOM uint32_t  GTPR;                         /*!< (@ 0x00000018) Guard time and prescaler register                          */
} USART6_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital-to-analog converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40007400) DAC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __OM  uint32_t  SWTRIGR;                      /*!< (@ 0x00000004) software trigger register                                  */
  __IOM uint32_t  DHR12R1;                      /*!< (@ 0x00000008) channel1 12-bit right-aligned data holding register        */
  __IOM uint32_t  DHR12L1;                      /*!< (@ 0x0000000C) channel1 12-bit left aligned data holding register         */
  __IOM uint32_t  DHR8R1;                       /*!< (@ 0x00000010) channel1 8-bit right aligned data holding register         */
  __IOM uint32_t  DHR12R2;                      /*!< (@ 0x00000014) channel2 12-bit right aligned data holding register        */
  __IOM uint32_t  DHR12L2;                      /*!< (@ 0x00000018) channel2 12-bit left aligned data holding register         */
  __IOM uint32_t  DHR8R2;                       /*!< (@ 0x0000001C) channel2 8-bit right-aligned data holding register         */
  __IOM uint32_t  DHR12RD;                      /*!< (@ 0x00000020) Dual DAC 12-bit right-aligned data holding register        */
  __IOM uint32_t  DHR12LD;                      /*!< (@ 0x00000024) DUAL DAC 12-bit left aligned data holding register         */
  __IOM uint32_t  DHR8RD;                       /*!< (@ 0x00000028) DUAL DAC 8-bit right aligned data holding register         */
  __IM  uint32_t  DOR1;                         /*!< (@ 0x0000002C) channel1 data output register                              */
  __IM  uint32_t  DOR2;                         /*!< (@ 0x00000030) channel2 data output register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000034) status register                                            */
} DAC_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) power control register                                     */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000004) power control/status register                              */
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  __OM  uint32_t  KR;                           /*!< (@ 0x00000000) Key register                                               */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000004) Prescaler register                                         */
  __IOM uint32_t  RLR;                          /*!< (@ 0x00000008) Reload register                                            */
  __IM  uint32_t  SR;                           /*!< (@ 0x0000000C) Status register                                            */
} IWDG_Type;                                    /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Control register                                           */
  __IOM uint32_t  CFR;                          /*!< (@ 0x00000004) Configuration register                                     */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) Status register                                            */
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  __IOM uint32_t  TR;                           /*!< (@ 0x00000000) time register                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) date register                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) control register                                           */
  __IOM uint32_t  ISR;                          /*!< (@ 0x0000000C) initialization and status register                         */
  __IOM uint32_t  PRER;                         /*!< (@ 0x00000010) prescaler register                                         */
  __IOM uint32_t  WUTR;                         /*!< (@ 0x00000014) wakeup timer register                                      */
  __IOM uint32_t  CALIBR;                       /*!< (@ 0x00000018) calibration register                                       */
  __IOM uint32_t  ALRMAR;                       /*!< (@ 0x0000001C) alarm A register                                           */
  __IOM uint32_t  ALRMBR;                       /*!< (@ 0x00000020) alarm B register                                           */
  __OM  uint32_t  WPR;                          /*!< (@ 0x00000024) write protection register                                  */
  __IM  uint32_t  SSR;                          /*!< (@ 0x00000028) sub second register                                        */
  __OM  uint32_t  SHIFTR;                       /*!< (@ 0x0000002C) shift control register                                     */
  __IM  uint32_t  TSTR;                         /*!< (@ 0x00000030) time stamp time register                                   */
  __IM  uint32_t  TSDR;                         /*!< (@ 0x00000034) time stamp date register                                   */
  __IM  uint32_t  TSSSR;                        /*!< (@ 0x00000038) timestamp sub second register                              */
  __IOM uint32_t  CALR;                         /*!< (@ 0x0000003C) calibration register                                       */
  __IOM uint32_t  TAFCR;                        /*!< (@ 0x00000040) tamper and alternate function configuration register       */
  __IOM uint32_t  ALRMASSR;                     /*!< (@ 0x00000044) alarm A sub second register                                */
  __IOM uint32_t  ALRMBSSR;                     /*!< (@ 0x00000048) alarm B sub second register                                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  BKP0R;                        /*!< (@ 0x00000050) backup register                                            */
  __IOM uint32_t  BKP1R;                        /*!< (@ 0x00000054) backup register                                            */
  __IOM uint32_t  BKP2R;                        /*!< (@ 0x00000058) backup register                                            */
  __IOM uint32_t  BKP3R;                        /*!< (@ 0x0000005C) backup register                                            */
  __IOM uint32_t  BKP4R;                        /*!< (@ 0x00000060) backup register                                            */
  __IOM uint32_t  BKP5R;                        /*!< (@ 0x00000064) backup register                                            */
  __IOM uint32_t  BKP6R;                        /*!< (@ 0x00000068) backup register                                            */
  __IOM uint32_t  BKP7R;                        /*!< (@ 0x0000006C) backup register                                            */
  __IOM uint32_t  BKP8R;                        /*!< (@ 0x00000070) backup register                                            */
  __IOM uint32_t  BKP9R;                        /*!< (@ 0x00000074) backup register                                            */
  __IOM uint32_t  BKP10R;                       /*!< (@ 0x00000078) backup register                                            */
  __IOM uint32_t  BKP11R;                       /*!< (@ 0x0000007C) backup register                                            */
  __IOM uint32_t  BKP12R;                       /*!< (@ 0x00000080) backup register                                            */
  __IOM uint32_t  BKP13R;                       /*!< (@ 0x00000084) backup register                                            */
  __IOM uint32_t  BKP14R;                       /*!< (@ 0x00000088) backup register                                            */
  __IOM uint32_t  BKP15R;                       /*!< (@ 0x0000008C) backup register                                            */
  __IOM uint32_t  BKP16R;                       /*!< (@ 0x00000090) backup register                                            */
  __IOM uint32_t  BKP17R;                       /*!< (@ 0x00000094) backup register                                            */
  __IOM uint32_t  BKP18R;                       /*!< (@ 0x00000098) backup register                                            */
  __IOM uint32_t  BKP19R;                       /*!< (@ 0x0000009C) backup register                                            */
} RTC_Type;                                     /*!< Size = 160 (0xa0)                                                         */



/* =========================================================================================================================== */
/* ================                                           UART4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (UART4)
  */

typedef struct {                                /*!< (@ 0x40004C00) UART4 Structure                                            */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000000) Status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) Data register                                              */
  __IOM uint32_t  BRR;                          /*!< (@ 0x00000008) Baud rate register                                         */
  __IOM uint32_t  CR1;                          /*!< (@ 0x0000000C) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000010) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000014) Control register 3                                         */
} UART4_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           C_ADC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Common ADC registers (C_ADC)
  */

typedef struct {                                /*!< (@ 0x40012300) C_ADC Structure                                            */
  __IM  uint32_t  CSR;                          /*!< (@ 0x00000000) ADC Common status register                                 */
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000004) ADC common control register                                */
  __IM  uint32_t  CDR;                          /*!< (@ 0x00000008) ADC common regular data register for dual and
                                                                    triple modes                                               */
} C_ADC_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIM1)
  */

typedef struct {                                /*!< (@ 0x40010000) TIM1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IOM uint32_t  RCR;                          /*!< (@ 0x00000030) repetition counter register                                */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IOM uint32_t  BDTR;                         /*!< (@ 0x00000044) break and dead-time register                               */
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) TIM5 option register                                       */
} TIM2_Type;                                    /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM3)
  */

typedef struct {                                /*!< (@ 0x40000400) TIM3 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
} TIM3_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM5                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM5)
  */

typedef struct {                                /*!< (@ 0x40000C00) TIM5 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) TIM5 option register                                       */
} TIM5_Type;                                    /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM9                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM9)
  */

typedef struct {                                /*!< (@ 0x40014000) TIM9 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
} TIM9_Type;                                    /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM10                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM10)
  */

typedef struct {                                /*!< (@ 0x40014400) TIM10 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
} TIM10_Type;                                   /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM11                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM11)
  */

typedef struct {                                /*!< (@ 0x40014800) TIM11 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IM  uint32_t  RESERVED3[6];
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) option register                                            */
} TIM11_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic timers (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                       Ethernet_MAC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: media access control  (MAC) (Ethernet_MAC)
  */

typedef struct {                                /*!< (@ 0x40028000) Ethernet_MAC Structure                                     */
  __IOM uint32_t  MACCR;                        /*!< (@ 0x00000000) Ethernet MAC configuration register                        */
  __IOM uint32_t  MACFFR;                       /*!< (@ 0x00000004) Ethernet MAC frame filter register                         */
  __IOM uint32_t  MACHTHR;                      /*!< (@ 0x00000008) Ethernet MAC hash table high register                      */
  __IOM uint32_t  MACHTLR;                      /*!< (@ 0x0000000C) Ethernet MAC hash table low register                       */
  __IOM uint32_t  MACMIIAR;                     /*!< (@ 0x00000010) Ethernet MAC MII address register                          */
  __IOM uint32_t  MACMIIDR;                     /*!< (@ 0x00000014) Ethernet MAC MII data register                             */
  __IOM uint32_t  MACFCR;                       /*!< (@ 0x00000018) Ethernet MAC flow control register                         */
  __IOM uint32_t  MACVLANTR;                    /*!< (@ 0x0000001C) Ethernet MAC VLAN tag register                             */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  MACPMTCSR;                    /*!< (@ 0x0000002C) Ethernet MAC PMT control and status register               */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  MACDBGR;                      /*!< (@ 0x00000034) Ethernet MAC debug register                                */
  __IOM uint32_t  MACSR;                        /*!< (@ 0x00000038) Ethernet MAC interrupt status register                     */
  __IOM uint32_t  MACIMR;                       /*!< (@ 0x0000003C) Ethernet MAC interrupt mask register                       */
  __IOM uint32_t  MACA0HR;                      /*!< (@ 0x00000040) Ethernet MAC address 0 high register                       */
  __IOM uint32_t  MACA0LR;                      /*!< (@ 0x00000044) Ethernet MAC address 0 low register                        */
  __IOM uint32_t  MACA1HR;                      /*!< (@ 0x00000048) Ethernet MAC address 1 high register                       */
  __IOM uint32_t  MACA1LR;                      /*!< (@ 0x0000004C) Ethernet MAC address1 low register                         */
  __IOM uint32_t  MACA2HR;                      /*!< (@ 0x00000050) Ethernet MAC address 2 high register                       */
  __IOM uint32_t  MACA2LR;                      /*!< (@ 0x00000054) Ethernet MAC address 2 low register                        */
  __IOM uint32_t  MACA3HR;                      /*!< (@ 0x00000058) Ethernet MAC address 3 high register                       */
  __IOM uint32_t  MACA3LR;                      /*!< (@ 0x0000005C) Ethernet MAC address 3 low register                        */
} Ethernet_MAC_Type;                            /*!< Size = 96 (0x60)                                                          */



/* =========================================================================================================================== */
/* ================                                       Ethernet_MMC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: MAC management counters (Ethernet_MMC)
  */

typedef struct {                                /*!< (@ 0x40028100) Ethernet_MMC Structure                                     */
  __IOM uint32_t  MMCCR;                        /*!< (@ 0x00000000) Ethernet MMC control register                              */
  __IOM uint32_t  MMCRIR;                       /*!< (@ 0x00000004) Ethernet MMC receive interrupt register                    */
  __IM  uint32_t  MMCTIR;                       /*!< (@ 0x00000008) Ethernet MMC transmit interrupt register                   */
  __IOM uint32_t  MMCRIMR;                      /*!< (@ 0x0000000C) Ethernet MMC receive interrupt mask register               */
  __IOM uint32_t  MMCTIMR;                      /*!< (@ 0x00000010) Ethernet MMC transmit interrupt mask register              */
  __IM  uint32_t  RESERVED[14];
  __IM  uint32_t  MMCTGFSCCR;                   /*!< (@ 0x0000004C) Ethernet MMC transmitted good frames after a
                                                                    single collision counter                                   */
  __IM  uint32_t  MMCTGFMSCCR;                  /*!< (@ 0x00000050) Ethernet MMC transmitted good frames after more
                                                                    than a single collision                                    */
  __IM  uint32_t  RESERVED1[5];
  __IM  uint32_t  MMCTGFCR;                     /*!< (@ 0x00000068) Ethernet MMC transmitted good frames counter
                                                                    register                                                   */
  __IM  uint32_t  RESERVED2[10];
  __IM  uint32_t  MMCRFCECR;                    /*!< (@ 0x00000094) Ethernet MMC received frames with CRC error counter
                                                                    register                                                   */
  __IM  uint32_t  MMCRFAECR;                    /*!< (@ 0x00000098) Ethernet MMC received frames with alignment error
                                                                    counter register                                           */
  __IM  uint32_t  RESERVED3[10];
  __IM  uint32_t  MMCRGUFCR;                    /*!< (@ 0x000000C4) MMC received good unicast frames counter register          */
} Ethernet_MMC_Type;                            /*!< Size = 200 (0xc8)                                                         */



/* =========================================================================================================================== */
/* ================                                       Ethernet_PTP                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: Precision time protocol (Ethernet_PTP)
  */

typedef struct {                                /*!< (@ 0x40028700) Ethernet_PTP Structure                                     */
  __IOM uint32_t  PTPTSCR;                      /*!< (@ 0x00000000) Ethernet PTP time stamp control register                   */
  __IOM uint32_t  PTPSSIR;                      /*!< (@ 0x00000004) Ethernet PTP subsecond increment register                  */
  __IM  uint32_t  PTPTSHR;                      /*!< (@ 0x00000008) Ethernet PTP time stamp high register                      */
  __IM  uint32_t  PTPTSLR;                      /*!< (@ 0x0000000C) Ethernet PTP time stamp low register                       */
  __IOM uint32_t  PTPTSHUR;                     /*!< (@ 0x00000010) Ethernet PTP time stamp high update register               */
  __IOM uint32_t  PTPTSLUR;                     /*!< (@ 0x00000014) Ethernet PTP time stamp low update register                */
  __IOM uint32_t  PTPTSAR;                      /*!< (@ 0x00000018) Ethernet PTP time stamp addend register                    */
  __IOM uint32_t  PTPTTHR;                      /*!< (@ 0x0000001C) Ethernet PTP target time high register                     */
  __IOM uint32_t  PTPTTLR;                      /*!< (@ 0x00000020) Ethernet PTP target time low register                      */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  PTPTSSR;                      /*!< (@ 0x00000028) Ethernet PTP time stamp status register                    */
  __IM  uint32_t  PTPPPSCR;                     /*!< (@ 0x0000002C) Ethernet PTP PPS control register                          */
} Ethernet_PTP_Type;                            /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                       Ethernet_DMA                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: DMA controller operation (Ethernet_DMA)
  */

typedef struct {                                /*!< (@ 0x40029000) Ethernet_DMA Structure                                     */
  __IOM uint32_t  DMABMR;                       /*!< (@ 0x00000000) Ethernet DMA bus mode register                             */
  __IOM uint32_t  DMATPDR;                      /*!< (@ 0x00000004) Ethernet DMA transmit poll demand register                 */
  __IOM uint32_t  DMARPDR;                      /*!< (@ 0x00000008) EHERNET DMA receive poll demand register                   */
  __IOM uint32_t  DMARDLAR;                     /*!< (@ 0x0000000C) Ethernet DMA receive descriptor list address
                                                                    register                                                   */
  __IOM uint32_t  DMATDLAR;                     /*!< (@ 0x00000010) Ethernet DMA transmit descriptor list address
                                                                    register                                                   */
  __IOM uint32_t  DMASR;                        /*!< (@ 0x00000014) Ethernet DMA status register                               */
  __IOM uint32_t  DMAOMR;                       /*!< (@ 0x00000018) Ethernet DMA operation mode register                       */
  __IOM uint32_t  DMAIER;                       /*!< (@ 0x0000001C) Ethernet DMA interrupt enable register                     */
  __IOM uint32_t  DMAMFBOCR;                    /*!< (@ 0x00000020) Ethernet DMA missed frame and buffer overflow
                                                                    counter register                                           */
  __IOM uint32_t  DMARSWTR;                     /*!< (@ 0x00000024) Ethernet DMA receive status watchdog timer register        */
  __IM  uint32_t  RESERVED[8];
  __IM  uint32_t  DMACHTDR;                     /*!< (@ 0x00000048) Ethernet DMA current host transmit descriptor
                                                                    register                                                   */
  __IM  uint32_t  DMACHRDR;                     /*!< (@ 0x0000004C) Ethernet DMA current host receive descriptor
                                                                    register                                                   */
  __IM  uint32_t  DMACHTBAR;                    /*!< (@ 0x00000050) Ethernet DMA current host transmit buffer address
                                                                    register                                                   */
  __IM  uint32_t  DMACHRBAR;                    /*!< (@ 0x00000054) Ethernet DMA current host receive buffer address
                                                                    register                                                   */
} Ethernet_DMA_Type;                            /*!< Size = 88 (0x58)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cryptographic processor (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000000) Data register                                              */
  __IOM uint32_t  IDR;                          /*!< (@ 0x00000004) Independent Data register                                  */
  __OM  uint32_t  CR;                           /*!< (@ 0x00000008) Control register                                           */
} CRC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x50000000) OTG_FS_GLOBAL Structure                                    */
  __IOM uint32_t  FS_GOTGCTL;                   /*!< (@ 0x00000000) OTG_FS control and status register (OTG_FS_GOTGCTL)        */
  __IOM uint32_t  FS_GOTGINT;                   /*!< (@ 0x00000004) OTG_FS interrupt register (OTG_FS_GOTGINT)                 */
  __IOM uint32_t  FS_GAHBCFG;                   /*!< (@ 0x00000008) OTG_FS AHB configuration register (OTG_FS_GAHBCFG)         */
  __IOM uint32_t  FS_GUSBCFG;                   /*!< (@ 0x0000000C) OTG_FS USB configuration register (OTG_FS_GUSBCFG)         */
  __IOM uint32_t  FS_GRSTCTL;                   /*!< (@ 0x00000010) OTG_FS reset register (OTG_FS_GRSTCTL)                     */
  __IOM uint32_t  FS_GINTSTS;                   /*!< (@ 0x00000014) OTG_FS core interrupt register (OTG_FS_GINTSTS)            */
  __IOM uint32_t  FS_GINTMSK;                   /*!< (@ 0x00000018) OTG_FS interrupt mask register (OTG_FS_GINTMSK)            */
  
  union {
    __IM  uint32_t FS_GRXSTSR_Device;           /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Device mode)              */
    __IM  uint32_t FS_GRXSTSR_Host;             /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Hostmode)                 */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_GRXFSIZ;                   /*!< (@ 0x00000024) OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)         */
  
  union {
    __IOM uint32_t FS_GNPTXFSIZ_Device;         /*!< (@ 0x00000028) OTG_FS non-periodic transmit FIFO size register
                                                                    (Device mode)                                              */
    __IOM uint32_t FS_GNPTXFSIZ_Host;           /*!< (@ 0x00000028) OTG_FS non-periodic transmit FIFO size register
                                                                    (Host mode)                                                */
  };
  __IM  uint32_t  FS_GNPTXSTS;                  /*!< (@ 0x0000002C) OTG_FS non-periodic transmit FIFO/queue status
                                                                    register (OTG_FS_GNPTXSTS)                                 */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  FS_GCCFG;                     /*!< (@ 0x00000038) OTG_FS general core configuration register (OTG_FS_GCCFG)  */
  __IOM uint32_t  FS_CID;                       /*!< (@ 0x0000003C) core ID register                                           */
  __IM  uint32_t  RESERVED2[48];
  __IOM uint32_t  FS_HPTXFSIZ;                  /*!< (@ 0x00000100) OTG_FS Host periodic transmit FIFO size register
                                                                    (OTG_FS_HPTXFSIZ)                                          */
  __IOM uint32_t  FS_DIEPTXF1;                  /*!< (@ 0x00000104) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF2)                                 */
  __IOM uint32_t  FS_DIEPTXF2;                  /*!< (@ 0x00000108) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF3)                                 */
  __IOM uint32_t  FS_DIEPTXF3;                  /*!< (@ 0x0000010C) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF4)                                 */
} OTG_FS_GLOBAL_Type;                           /*!< Size = 272 (0x110)                                                        */



/* =========================================================================================================================== */
/* ================                                        OTG_FS_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_HOST)
  */

typedef struct {                                /*!< (@ 0x50000400) OTG_FS_HOST Structure                                      */
  __IOM uint32_t  FS_HCFG;                      /*!< (@ 0x00000000) OTG_FS host configuration register (OTG_FS_HCFG)           */
  __IOM uint32_t  HFIR;                         /*!< (@ 0x00000004) OTG_FS Host frame interval register                        */
  __IM  uint32_t  FS_HFNUM;                     /*!< (@ 0x00000008) OTG_FS host frame number/frame time remaining
                                                                    register (OTG_FS_HFNUM)                                    */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_HPTXSTS;                   /*!< (@ 0x00000010) OTG_FS_Host periodic transmit FIFO/queue status
                                                                    register (OTG_FS_HPTXSTS)                                  */
  __IM  uint32_t  HAINT;                        /*!< (@ 0x00000014) OTG_FS Host all channels interrupt register                */
  __IOM uint32_t  HAINTMSK;                     /*!< (@ 0x00000018) OTG_FS host all channels interrupt mask register           */
  __IM  uint32_t  RESERVED1[9];
  __IOM uint32_t  FS_HPRT;                      /*!< (@ 0x00000040) OTG_FS host port control and status register
                                                                    (OTG_FS_HPRT)                                              */
  __IM  uint32_t  RESERVED2[47];
  __IOM uint32_t  FS_HCCHAR0;                   /*!< (@ 0x00000100) OTG_FS host channel-0 characteristics register
                                                                    (OTG_FS_HCCHAR0)                                           */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  FS_HCINT0;                    /*!< (@ 0x00000108) OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)   */
  __IOM uint32_t  FS_HCINTMSK0;                 /*!< (@ 0x0000010C) OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)     */
  __IOM uint32_t  FS_HCTSIZ0;                   /*!< (@ 0x00000110) OTG_FS host channel-0 transfer size register               */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  FS_HCCHAR1;                   /*!< (@ 0x00000120) OTG_FS host channel-1 characteristics register
                                                                    (OTG_FS_HCCHAR1)                                           */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  FS_HCINT1;                    /*!< (@ 0x00000128) OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)   */
  __IOM uint32_t  FS_HCINTMSK1;                 /*!< (@ 0x0000012C) OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)     */
  __IOM uint32_t  FS_HCTSIZ1;                   /*!< (@ 0x00000130) OTG_FS host channel-1 transfer size register               */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  FS_HCCHAR2;                   /*!< (@ 0x00000140) OTG_FS host channel-2 characteristics register
                                                                    (OTG_FS_HCCHAR2)                                           */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  FS_HCINT2;                    /*!< (@ 0x00000148) OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)   */
  __IOM uint32_t  FS_HCINTMSK2;                 /*!< (@ 0x0000014C) OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)     */
  __IOM uint32_t  FS_HCTSIZ2;                   /*!< (@ 0x00000150) OTG_FS host channel-2 transfer size register               */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  FS_HCCHAR3;                   /*!< (@ 0x00000160) OTG_FS host channel-3 characteristics register
                                                                    (OTG_FS_HCCHAR3)                                           */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  FS_HCINT3;                    /*!< (@ 0x00000168) OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)   */
  __IOM uint32_t  FS_HCINTMSK3;                 /*!< (@ 0x0000016C) OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)     */
  __IOM uint32_t  FS_HCTSIZ3;                   /*!< (@ 0x00000170) OTG_FS host channel-3 transfer size register               */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  FS_HCCHAR4;                   /*!< (@ 0x00000180) OTG_FS host channel-4 characteristics register
                                                                    (OTG_FS_HCCHAR4)                                           */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  FS_HCINT4;                    /*!< (@ 0x00000188) OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)   */
  __IOM uint32_t  FS_HCINTMSK4;                 /*!< (@ 0x0000018C) OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)     */
  __IOM uint32_t  FS_HCTSIZ4;                   /*!< (@ 0x00000190) OTG_FS host channel-x transfer size register               */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  FS_HCCHAR5;                   /*!< (@ 0x000001A0) OTG_FS host channel-5 characteristics register
                                                                    (OTG_FS_HCCHAR5)                                           */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  FS_HCINT5;                    /*!< (@ 0x000001A8) OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)   */
  __IOM uint32_t  FS_HCINTMSK5;                 /*!< (@ 0x000001AC) OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)     */
  __IOM uint32_t  FS_HCTSIZ5;                   /*!< (@ 0x000001B0) OTG_FS host channel-5 transfer size register               */
  __IM  uint32_t  RESERVED14[3];
  __IOM uint32_t  FS_HCCHAR6;                   /*!< (@ 0x000001C0) OTG_FS host channel-6 characteristics register
                                                                    (OTG_FS_HCCHAR6)                                           */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  FS_HCINT6;                    /*!< (@ 0x000001C8) OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)   */
  __IOM uint32_t  FS_HCINTMSK6;                 /*!< (@ 0x000001CC) OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)     */
  __IOM uint32_t  FS_HCTSIZ6;                   /*!< (@ 0x000001D0) OTG_FS host channel-6 transfer size register               */
  __IM  uint32_t  RESERVED16[3];
  __IOM uint32_t  FS_HCCHAR7;                   /*!< (@ 0x000001E0) OTG_FS host channel-7 characteristics register
                                                                    (OTG_FS_HCCHAR7)                                           */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  FS_HCINT7;                    /*!< (@ 0x000001E8) OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)   */
  __IOM uint32_t  FS_HCINTMSK7;                 /*!< (@ 0x000001EC) OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)     */
  __IOM uint32_t  FS_HCTSIZ7;                   /*!< (@ 0x000001F0) OTG_FS host channel-7 transfer size register               */
} OTG_FS_HOST_Type;                             /*!< Size = 500 (0x1f4)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x50000800) OTG_FS_DEVICE Structure                                    */
  __IOM uint32_t  FS_DCFG;                      /*!< (@ 0x00000000) OTG_FS device configuration register (OTG_FS_DCFG)         */
  __IOM uint32_t  FS_DCTL;                      /*!< (@ 0x00000004) OTG_FS device control register (OTG_FS_DCTL)               */
  __IM  uint32_t  FS_DSTS;                      /*!< (@ 0x00000008) OTG_FS device status register (OTG_FS_DSTS)                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FS_DIEPMSK;                   /*!< (@ 0x00000010) OTG_FS device IN endpoint common interrupt mask
                                                                    register (OTG_FS_DIEPMSK)                                  */
  __IOM uint32_t  FS_DOEPMSK;                   /*!< (@ 0x00000014) OTG_FS device OUT endpoint common interrupt mask
                                                                    register (OTG_FS_DOEPMSK)                                  */
  __IM  uint32_t  FS_DAINT;                     /*!< (@ 0x00000018) OTG_FS device all endpoints interrupt register
                                                                    (OTG_FS_DAINT)                                             */
  __IOM uint32_t  FS_DAINTMSK;                  /*!< (@ 0x0000001C) OTG_FS all endpoints interrupt mask register
                                                                    (OTG_FS_DAINTMSK)                                          */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  DVBUSDIS;                     /*!< (@ 0x00000028) OTG_FS device VBUS discharge time register                 */
  __IOM uint32_t  DVBUSPULSE;                   /*!< (@ 0x0000002C) OTG_FS device VBUS pulsing time register                   */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  DIEPEMPMSK;                   /*!< (@ 0x00000034) OTG_FS device IN endpoint FIFO empty interrupt
                                                                    mask register                                              */
  __IM  uint32_t  RESERVED3[50];
  __IOM uint32_t  FS_DIEPCTL0;                  /*!< (@ 0x00000100) OTG_FS device control IN endpoint 0 control register
                                                                    (OTG_FS_DIEPCTL0)                                          */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  DIEPINT0;                     /*!< (@ 0x00000108) device endpoint-x interrupt register                       */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  DIEPTSIZ0;                    /*!< (@ 0x00000110) device endpoint-0 transfer size register                   */
  __IM  uint32_t  RESERVED6;
  __IM  uint32_t  DTXFSTS0;                     /*!< (@ 0x00000118) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  DIEPCTL1;                     /*!< (@ 0x00000120) OTG device endpoint-1 control register                     */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  DIEPINT1;                     /*!< (@ 0x00000128) device endpoint-1 interrupt register                       */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  DIEPTSIZ1;                    /*!< (@ 0x00000130) device endpoint-1 transfer size register                   */
  __IM  uint32_t  RESERVED10;
  __IM  uint32_t  DTXFSTS1;                     /*!< (@ 0x00000138) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  DIEPCTL2;                     /*!< (@ 0x00000140) OTG device endpoint-2 control register                     */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  DIEPINT2;                     /*!< (@ 0x00000148) device endpoint-2 interrupt register                       */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  DIEPTSIZ2;                    /*!< (@ 0x00000150) device endpoint-2 transfer size register                   */
  __IM  uint32_t  RESERVED14;
  __IM  uint32_t  DTXFSTS2;                     /*!< (@ 0x00000158) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  DIEPCTL3;                     /*!< (@ 0x00000160) OTG device endpoint-3 control register                     */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  DIEPINT3;                     /*!< (@ 0x00000168) device endpoint-3 interrupt register                       */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  DIEPTSIZ3;                    /*!< (@ 0x00000170) device endpoint-3 transfer size register                   */
  __IM  uint32_t  RESERVED18;
  __IM  uint32_t  DTXFSTS3;                     /*!< (@ 0x00000178) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED19[97];
  __IOM uint32_t  DOEPCTL0;                     /*!< (@ 0x00000300) device endpoint-0 control register                         */
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  DOEPINT0;                     /*!< (@ 0x00000308) device endpoint-0 interrupt register                       */
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  DOEPTSIZ0;                    /*!< (@ 0x00000310) device OUT endpoint-0 transfer size register               */
  __IM  uint32_t  RESERVED22[3];
  __IOM uint32_t  DOEPCTL1;                     /*!< (@ 0x00000320) device endpoint-1 control register                         */
  __IM  uint32_t  RESERVED23;
  __IOM uint32_t  DOEPINT1;                     /*!< (@ 0x00000328) device endpoint-1 interrupt register                       */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  DOEPTSIZ1;                    /*!< (@ 0x00000330) device OUT endpoint-1 transfer size register               */
  __IM  uint32_t  RESERVED25[3];
  __IOM uint32_t  DOEPCTL2;                     /*!< (@ 0x00000340) device endpoint-2 control register                         */
  __IM  uint32_t  RESERVED26;
  __IOM uint32_t  DOEPINT2;                     /*!< (@ 0x00000348) device endpoint-2 interrupt register                       */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  DOEPTSIZ2;                    /*!< (@ 0x00000350) device OUT endpoint-2 transfer size register               */
  __IM  uint32_t  RESERVED28[3];
  __IOM uint32_t  DOEPCTL3;                     /*!< (@ 0x00000360) device endpoint-3 control register                         */
  __IM  uint32_t  RESERVED29;
  __IOM uint32_t  DOEPINT3;                     /*!< (@ 0x00000368) device endpoint-3 interrupt register                       */
  __IM  uint32_t  RESERVED30;
  __IOM uint32_t  DOEPTSIZ3;                    /*!< (@ 0x00000370) device OUT endpoint-3 transfer size register               */
} OTG_FS_DEVICE_Type;                           /*!< Size = 884 (0x374)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x50000E00) OTG_FS_PWRCLK Structure                                    */
  __IOM uint32_t  FS_PCGCCTL;                   /*!< (@ 0x00000000) OTG_FS power and clock gating control register
                                                                    (OTG_FS_PCGCCTL)                                           */
} OTG_FS_PWRCLK_Type;                           /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           CAN1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN1)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN1 Structure                                             */
  __IOM uint32_t  MCR;                          /*!< (@ 0x00000000) master control register                                    */
  __IOM uint32_t  MSR;                          /*!< (@ 0x00000004) master status register                                     */
  __IOM uint32_t  TSR;                          /*!< (@ 0x00000008) transmit status register                                   */
  __IOM uint32_t  RF0R;                         /*!< (@ 0x0000000C) receive FIFO 0 register                                    */
  __IOM uint32_t  RF1R;                         /*!< (@ 0x00000010) receive FIFO 1 register                                    */
  __IOM uint32_t  IER;                          /*!< (@ 0x00000014) interrupt enable register                                  */
  __IOM uint32_t  ESR;                          /*!< (@ 0x00000018) interrupt enable register                                  */
  __IOM uint32_t  BTR;                          /*!< (@ 0x0000001C) bit timing register                                        */
  __IM  uint32_t  RESERVED[88];
  __IOM uint32_t  TI0R;                         /*!< (@ 0x00000180) TX mailbox identifier register                             */
  __IOM uint32_t  TDT0R;                        /*!< (@ 0x00000184) mailbox data length control and time stamp register        */
  __IOM uint32_t  TDL0R;                        /*!< (@ 0x00000188) mailbox data low register                                  */
  __IOM uint32_t  TDH0R;                        /*!< (@ 0x0000018C) mailbox data high register                                 */
  __IOM uint32_t  TI1R;                         /*!< (@ 0x00000190) mailbox identifier register                                */
  __IOM uint32_t  TDT1R;                        /*!< (@ 0x00000194) mailbox data length control and time stamp register        */
  __IOM uint32_t  TDL1R;                        /*!< (@ 0x00000198) mailbox data low register                                  */
  __IOM uint32_t  TDH1R;                        /*!< (@ 0x0000019C) mailbox data high register                                 */
  __IOM uint32_t  TI2R;                         /*!< (@ 0x000001A0) mailbox identifier register                                */
  __IOM uint32_t  TDT2R;                        /*!< (@ 0x000001A4) mailbox data length control and time stamp register        */
  __IOM uint32_t  TDL2R;                        /*!< (@ 0x000001A8) mailbox data low register                                  */
  __IOM uint32_t  TDH2R;                        /*!< (@ 0x000001AC) mailbox data high register                                 */
  __IM  uint32_t  RI0R;                         /*!< (@ 0x000001B0) receive FIFO mailbox identifier register                   */
  __IM  uint32_t  RDT0R;                        /*!< (@ 0x000001B4) mailbox data high register                                 */
  __IM  uint32_t  RDL0R;                        /*!< (@ 0x000001B8) mailbox data high register                                 */
  __IM  uint32_t  RDH0R;                        /*!< (@ 0x000001BC) receive FIFO mailbox data high register                    */
  __IM  uint32_t  RI1R;                         /*!< (@ 0x000001C0) mailbox data high register                                 */
  __IM  uint32_t  RDT1R;                        /*!< (@ 0x000001C4) mailbox data high register                                 */
  __IM  uint32_t  RDL1R;                        /*!< (@ 0x000001C8) mailbox data high register                                 */
  __IM  uint32_t  RDH1R;                        /*!< (@ 0x000001CC) mailbox data high register                                 */
  __IM  uint32_t  RESERVED1[12];
  __IOM uint32_t  FMR;                          /*!< (@ 0x00000200) filter master register                                     */
  __IOM uint32_t  FM1R;                         /*!< (@ 0x00000204) filter mode register                                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  FS1R;                         /*!< (@ 0x0000020C) filter scale register                                      */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  FFA1R;                        /*!< (@ 0x00000214) filter FIFO assignment register                            */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  FA1R;                         /*!< (@ 0x0000021C) filter activation register                                 */
  __IM  uint32_t  RESERVED5[8];
  __IOM uint32_t  F0R1;                         /*!< (@ 0x00000240) Filter bank 0 register 1                                   */
  __IOM uint32_t  F0R2;                         /*!< (@ 0x00000244) Filter bank 0 register 2                                   */
  __IOM uint32_t  F1R1;                         /*!< (@ 0x00000248) Filter bank 1 register 1                                   */
  __IOM uint32_t  F1R2;                         /*!< (@ 0x0000024C) Filter bank 1 register 2                                   */
  __IOM uint32_t  F2R1;                         /*!< (@ 0x00000250) Filter bank 2 register 1                                   */
  __IOM uint32_t  F2R2;                         /*!< (@ 0x00000254) Filter bank 2 register 2                                   */
  __IOM uint32_t  F3R1;                         /*!< (@ 0x00000258) Filter bank 3 register 1                                   */
  __IOM uint32_t  F3R2;                         /*!< (@ 0x0000025C) Filter bank 3 register 2                                   */
  __IOM uint32_t  F4R1;                         /*!< (@ 0x00000260) Filter bank 4 register 1                                   */
  __IOM uint32_t  F4R2;                         /*!< (@ 0x00000264) Filter bank 4 register 2                                   */
  __IOM uint32_t  F5R1;                         /*!< (@ 0x00000268) Filter bank 5 register 1                                   */
  __IOM uint32_t  F5R2;                         /*!< (@ 0x0000026C) Filter bank 5 register 2                                   */
  __IOM uint32_t  F6R1;                         /*!< (@ 0x00000270) Filter bank 6 register 1                                   */
  __IOM uint32_t  F6R2;                         /*!< (@ 0x00000274) Filter bank 6 register 2                                   */
  __IOM uint32_t  F7R1;                         /*!< (@ 0x00000278) Filter bank 7 register 1                                   */
  __IOM uint32_t  F7R2;                         /*!< (@ 0x0000027C) Filter bank 7 register 2                                   */
  __IOM uint32_t  F8R1;                         /*!< (@ 0x00000280) Filter bank 8 register 1                                   */
  __IOM uint32_t  F8R2;                         /*!< (@ 0x00000284) Filter bank 8 register 2                                   */
  __IOM uint32_t  F9R1;                         /*!< (@ 0x00000288) Filter bank 9 register 1                                   */
  __IOM uint32_t  F9R2;                         /*!< (@ 0x0000028C) Filter bank 9 register 2                                   */
  __IOM uint32_t  F10R1;                        /*!< (@ 0x00000290) Filter bank 10 register 1                                  */
  __IOM uint32_t  F10R2;                        /*!< (@ 0x00000294) Filter bank 10 register 2                                  */
  __IOM uint32_t  F11R1;                        /*!< (@ 0x00000298) Filter bank 11 register 1                                  */
  __IOM uint32_t  F11R2;                        /*!< (@ 0x0000029C) Filter bank 11 register 2                                  */
  __IOM uint32_t  F12R1;                        /*!< (@ 0x000002A0) Filter bank 4 register 1                                   */
  __IOM uint32_t  F12R2;                        /*!< (@ 0x000002A4) Filter bank 12 register 2                                  */
  __IOM uint32_t  F13R1;                        /*!< (@ 0x000002A8) Filter bank 13 register 1                                  */
  __IOM uint32_t  F13R2;                        /*!< (@ 0x000002AC) Filter bank 13 register 2                                  */
  __IOM uint32_t  F14R1;                        /*!< (@ 0x000002B0) Filter bank 14 register 1                                  */
  __IOM uint32_t  F14R2;                        /*!< (@ 0x000002B4) Filter bank 14 register 2                                  */
  __IOM uint32_t  F15R1;                        /*!< (@ 0x000002B8) Filter bank 15 register 1                                  */
  __IOM uint32_t  F15R2;                        /*!< (@ 0x000002BC) Filter bank 15 register 2                                  */
  __IOM uint32_t  F16R1;                        /*!< (@ 0x000002C0) Filter bank 16 register 1                                  */
  __IOM uint32_t  F16R2;                        /*!< (@ 0x000002C4) Filter bank 16 register 2                                  */
  __IOM uint32_t  F17R1;                        /*!< (@ 0x000002C8) Filter bank 17 register 1                                  */
  __IOM uint32_t  F17R2;                        /*!< (@ 0x000002CC) Filter bank 17 register 2                                  */
  __IOM uint32_t  F18R1;                        /*!< (@ 0x000002D0) Filter bank 18 register 1                                  */
  __IOM uint32_t  F18R2;                        /*!< (@ 0x000002D4) Filter bank 18 register 2                                  */
  __IOM uint32_t  F19R1;                        /*!< (@ 0x000002D8) Filter bank 19 register 1                                  */
  __IOM uint32_t  F19R2;                        /*!< (@ 0x000002DC) Filter bank 19 register 2                                  */
  __IOM uint32_t  F20R1;                        /*!< (@ 0x000002E0) Filter bank 20 register 1                                  */
  __IOM uint32_t  F20R2;                        /*!< (@ 0x000002E4) Filter bank 20 register 2                                  */
  __IOM uint32_t  F21R1;                        /*!< (@ 0x000002E8) Filter bank 21 register 1                                  */
  __IOM uint32_t  F21R2;                        /*!< (@ 0x000002EC) Filter bank 21 register 2                                  */
  __IOM uint32_t  F22R1;                        /*!< (@ 0x000002F0) Filter bank 22 register 1                                  */
  __IOM uint32_t  F22R2;                        /*!< (@ 0x000002F4) Filter bank 22 register 2                                  */
  __IOM uint32_t  F23R1;                        /*!< (@ 0x000002F8) Filter bank 23 register 1                                  */
  __IOM uint32_t  F23R2;                        /*!< (@ 0x000002FC) Filter bank 23 register 2                                  */
  __IOM uint32_t  F24R1;                        /*!< (@ 0x00000300) Filter bank 24 register 1                                  */
  __IOM uint32_t  F24R2;                        /*!< (@ 0x00000304) Filter bank 24 register 2                                  */
  __IOM uint32_t  F25R1;                        /*!< (@ 0x00000308) Filter bank 25 register 1                                  */
  __IOM uint32_t  F25R2;                        /*!< (@ 0x0000030C) Filter bank 25 register 2                                  */
  __IOM uint32_t  F26R1;                        /*!< (@ 0x00000310) Filter bank 26 register 1                                  */
  __IOM uint32_t  F26R2;                        /*!< (@ 0x00000314) Filter bank 26 register 2                                  */
  __IOM uint32_t  F27R1;                        /*!< (@ 0x00000318) Filter bank 27 register 1                                  */
  __IOM uint32_t  F27R2;                        /*!< (@ 0x0000031C) Filter bank 27 register 2                                  */
} CAN1_Type;                                    /*!< Size = 800 (0x320)                                                        */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt  Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E100) NVIC Structure                                             */
  __IOM uint32_t  ISER0;                        /*!< (@ 0x00000000) Interrupt Set-Enable Register                              */
  __IOM uint32_t  ISER1;                        /*!< (@ 0x00000004) Interrupt Set-Enable Register                              */
  __IOM uint32_t  ISER2;                        /*!< (@ 0x00000008) Interrupt Set-Enable Register                              */
  __IM  uint32_t  RESERVED[29];
  __IOM uint32_t  ICER0;                        /*!< (@ 0x00000080) Interrupt Clear-Enable Register                            */
  __IOM uint32_t  ICER1;                        /*!< (@ 0x00000084) Interrupt Clear-Enable Register                            */
  __IOM uint32_t  ICER2;                        /*!< (@ 0x00000088) Interrupt Clear-Enable Register                            */
  __IM  uint32_t  RESERVED1[29];
  __IOM uint32_t  ISPR0;                        /*!< (@ 0x00000100) Interrupt Set-Pending Register                             */
  __IOM uint32_t  ISPR1;                        /*!< (@ 0x00000104) Interrupt Set-Pending Register                             */
  __IOM uint32_t  ISPR2;                        /*!< (@ 0x00000108) Interrupt Set-Pending Register                             */
  __IM  uint32_t  RESERVED2[29];
  __IOM uint32_t  ICPR0;                        /*!< (@ 0x00000180) Interrupt Clear-Pending Register                           */
  __IOM uint32_t  ICPR1;                        /*!< (@ 0x00000184) Interrupt Clear-Pending Register                           */
  __IOM uint32_t  ICPR2;                        /*!< (@ 0x00000188) Interrupt Clear-Pending Register                           */
  __IM  uint32_t  RESERVED3[29];
  __IM  uint32_t  IABR0;                        /*!< (@ 0x00000200) Interrupt Active Bit Register                              */
  __IM  uint32_t  IABR1;                        /*!< (@ 0x00000204) Interrupt Active Bit Register                              */
  __IM  uint32_t  IABR2;                        /*!< (@ 0x00000208) Interrupt Active Bit Register                              */
  __IM  uint32_t  RESERVED4[61];
  __IOM uint32_t  IPR0;                         /*!< (@ 0x00000300) Interrupt Priority Register                                */
  __IOM uint32_t  IPR1;                         /*!< (@ 0x00000304) Interrupt Priority Register                                */
  __IOM uint32_t  IPR2;                         /*!< (@ 0x00000308) Interrupt Priority Register                                */
  __IOM uint32_t  IPR3;                         /*!< (@ 0x0000030C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR4;                         /*!< (@ 0x00000310) Interrupt Priority Register                                */
  __IOM uint32_t  IPR5;                         /*!< (@ 0x00000314) Interrupt Priority Register                                */
  __IOM uint32_t  IPR6;                         /*!< (@ 0x00000318) Interrupt Priority Register                                */
  __IOM uint32_t  IPR7;                         /*!< (@ 0x0000031C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR8;                         /*!< (@ 0x00000320) Interrupt Priority Register                                */
  __IOM uint32_t  IPR9;                         /*!< (@ 0x00000324) Interrupt Priority Register                                */
  __IOM uint32_t  IPR10;                        /*!< (@ 0x00000328) Interrupt Priority Register                                */
  __IOM uint32_t  IPR11;                        /*!< (@ 0x0000032C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR12;                        /*!< (@ 0x00000330) Interrupt Priority Register                                */
  __IOM uint32_t  IPR13;                        /*!< (@ 0x00000334) Interrupt Priority Register                                */
  __IOM uint32_t  IPR14;                        /*!< (@ 0x00000338) Interrupt Priority Register                                */
  __IOM uint32_t  IPR15;                        /*!< (@ 0x0000033C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR16;                        /*!< (@ 0x00000340) Interrupt Priority Register                                */
  __IOM uint32_t  IPR17;                        /*!< (@ 0x00000344) Interrupt Priority Register                                */
  __IOM uint32_t  IPR18;                        /*!< (@ 0x00000348) Interrupt Priority Register                                */
  __IOM uint32_t  IPR19;                        /*!< (@ 0x0000034C) Interrupt Priority Register                                */
  __IOM uint32_t  IPR20;                        /*!< (@ 0x00000350) Interrupt Priority Register                                */
} NVIC_Type;                                    /*!< Size = 852 (0x354)                                                        */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief FLASH (FLASH)
  */

typedef struct {                                /*!< (@ 0x40023C00) FLASH Structure                                            */
  __IOM uint32_t  ACR;                          /*!< (@ 0x00000000) Flash access control register                              */
  __OM  uint32_t  KEYR;                         /*!< (@ 0x00000004) Flash key register                                         */
  __OM  uint32_t  OPTKEYR;                      /*!< (@ 0x00000008) Flash option key register                                  */
  __IOM uint32_t  SR;                           /*!< (@ 0x0000000C) Status register                                            */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000010) Control register                                           */
  __IOM uint32_t  OPTCR;                        /*!< (@ 0x00000014) Flash option control register                              */
  __IOM uint32_t  OPTCR1;                       /*!< (@ 0x00000018) Flash option control register 1                            */
} FLASH_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event  controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40013C00) EXTI Structure                                             */
  __IOM uint32_t  IMR;                          /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
  __IOM uint32_t  EMR;                          /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
  __IOM uint32_t  RTSR;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
  __IOM uint32_t  FTSR;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
  __IOM uint32_t  SWIER;                        /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x40040000) OTG_HS_GLOBAL Structure                                    */
  __IOM uint32_t  OTG_HS_GOTGCTL;               /*!< (@ 0x00000000) OTG_HS control and status register                         */
  __IOM uint32_t  OTG_HS_GOTGINT;               /*!< (@ 0x00000004) OTG_HS interrupt register                                  */
  __IOM uint32_t  OTG_HS_GAHBCFG;               /*!< (@ 0x00000008) OTG_HS AHB configuration register                          */
  __IOM uint32_t  OTG_HS_GUSBCFG;               /*!< (@ 0x0000000C) OTG_HS USB configuration register                          */
  __IOM uint32_t  OTG_HS_GRSTCTL;               /*!< (@ 0x00000010) OTG_HS reset register                                      */
  __IOM uint32_t  OTG_HS_GINTSTS;               /*!< (@ 0x00000014) OTG_HS core interrupt register                             */
  __IOM uint32_t  OTG_HS_GINTMSK;               /*!< (@ 0x00000018) OTG_HS interrupt mask register                             */
  
  union {
    __IM  uint32_t OTG_HS_GRXSTSR_Host;         /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (host
                                                                    mode)                                                      */
    __IM  uint32_t OTG_HS_GRXSTSR_Peripheral;   /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (peripheral
                                                                    mode mode)                                                 */
  };
  
  union {
    __IM  uint32_t OTG_HS_GRXSTSP_Host;         /*!< (@ 0x00000020) OTG_HS status read and pop register (host mode)            */
    __IM  uint32_t OTG_HS_GRXSTSP_Peripheral;   /*!< (@ 0x00000020) OTG_HS status read and pop register (peripheral
                                                                    mode)                                                      */
  };
  __IOM uint32_t  OTG_HS_GRXFSIZ;               /*!< (@ 0x00000024) OTG_HS Receive FIFO size register                          */
  
  union {
    __IOM uint32_t OTG_HS_GNPTXFSIZ_Host;       /*!< (@ 0x00000028) OTG_HS nonperiodic transmit FIFO size register
                                                                    (host mode)                                                */
    __IOM uint32_t OTG_HS_TX0FSIZ_Peripheral;   /*!< (@ 0x00000028) Endpoint 0 transmit FIFO size (peripheral mode)            */
  };
  __IM  uint32_t  OTG_HS_GNPTXSTS;              /*!< (@ 0x0000002C) OTG_HS nonperiodic transmit FIFO/queue status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  OTG_HS_GCCFG;                 /*!< (@ 0x00000038) OTG_HS general core configuration register                 */
  __IOM uint32_t  OTG_HS_CID;                   /*!< (@ 0x0000003C) OTG_HS core ID register                                    */
  __IM  uint32_t  RESERVED1[48];
  __IOM uint32_t  OTG_HS_HPTXFSIZ;              /*!< (@ 0x00000100) OTG_HS Host periodic transmit FIFO size register           */
  __IOM uint32_t  OTG_HS_DIEPTXF1;              /*!< (@ 0x00000104) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DIEPTXF2;              /*!< (@ 0x00000108) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IM  uint32_t  RESERVED2[4];
  __IOM uint32_t  OTG_HS_DIEPTXF3;              /*!< (@ 0x0000011C) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DIEPTXF4;              /*!< (@ 0x00000120) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DIEPTXF5;              /*!< (@ 0x00000124) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DIEPTXF6;              /*!< (@ 0x00000128) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DIEPTXF7;              /*!< (@ 0x0000012C) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
} OTG_HS_GLOBAL_Type;                           /*!< Size = 304 (0x130)                                                        */



/* =========================================================================================================================== */
/* ================                                        OTG_HS_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_HOST)
  */

typedef struct {                                /*!< (@ 0x40040400) OTG_HS_HOST Structure                                      */
  __IOM uint32_t  OTG_HS_HCFG;                  /*!< (@ 0x00000000) OTG_HS host configuration register                         */
  __IOM uint32_t  OTG_HS_HFIR;                  /*!< (@ 0x00000004) OTG_HS Host frame interval register                        */
  __IM  uint32_t  OTG_HS_HFNUM;                 /*!< (@ 0x00000008) OTG_HS host frame number/frame time remaining
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  OTG_HS_HPTXSTS;               /*!< (@ 0x00000010) OTG_HS_Host periodic transmit FIFO/queue status
                                                                    register                                                   */
  __IM  uint32_t  OTG_HS_HAINT;                 /*!< (@ 0x00000014) OTG_HS Host all channels interrupt register                */
  __IOM uint32_t  OTG_HS_HAINTMSK;              /*!< (@ 0x00000018) OTG_HS host all channels interrupt mask register           */
  __IM  uint32_t  RESERVED1[9];
  __IOM uint32_t  OTG_HS_HPRT;                  /*!< (@ 0x00000040) OTG_HS host port control and status register               */
  __IM  uint32_t  RESERVED2[47];
  __IOM uint32_t  OTG_HS_HCCHAR0;               /*!< (@ 0x00000100) OTG_HS host channel-0 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT0;               /*!< (@ 0x00000104) OTG_HS host channel-0 split control register               */
  __IOM uint32_t  OTG_HS_HCINT0;                /*!< (@ 0x00000108) OTG_HS host channel-11 interrupt register                  */
  __IOM uint32_t  OTG_HS_HCINTMSK0;             /*!< (@ 0x0000010C) OTG_HS host channel-11 interrupt mask register             */
  __IOM uint32_t  OTG_HS_HCTSIZ0;               /*!< (@ 0x00000110) OTG_HS host channel-11 transfer size register              */
  __IOM uint32_t  OTG_HS_HCDMA0;                /*!< (@ 0x00000114) OTG_HS host channel-0 DMA address register                 */
  __IM  uint32_t  RESERVED3[2];
  __IOM uint32_t  OTG_HS_HCCHAR1;               /*!< (@ 0x00000120) OTG_HS host channel-1 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT1;               /*!< (@ 0x00000124) OTG_HS host channel-1 split control register               */
  __IOM uint32_t  OTG_HS_HCINT1;                /*!< (@ 0x00000128) OTG_HS host channel-1 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK1;             /*!< (@ 0x0000012C) OTG_HS host channel-1 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ1;               /*!< (@ 0x00000130) OTG_HS host channel-1 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA1;                /*!< (@ 0x00000134) OTG_HS host channel-1 DMA address register                 */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  OTG_HS_HCCHAR2;               /*!< (@ 0x00000140) OTG_HS host channel-2 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT2;               /*!< (@ 0x00000144) OTG_HS host channel-2 split control register               */
  __IOM uint32_t  OTG_HS_HCINT2;                /*!< (@ 0x00000148) OTG_HS host channel-2 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK2;             /*!< (@ 0x0000014C) OTG_HS host channel-2 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ2;               /*!< (@ 0x00000150) OTG_HS host channel-2 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA2;                /*!< (@ 0x00000154) OTG_HS host channel-2 DMA address register                 */
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  OTG_HS_HCCHAR3;               /*!< (@ 0x00000160) OTG_HS host channel-3 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT3;               /*!< (@ 0x00000164) OTG_HS host channel-3 split control register               */
  __IOM uint32_t  OTG_HS_HCINT3;                /*!< (@ 0x00000168) OTG_HS host channel-3 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK3;             /*!< (@ 0x0000016C) OTG_HS host channel-3 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ3;               /*!< (@ 0x00000170) OTG_HS host channel-3 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA3;                /*!< (@ 0x00000174) OTG_HS host channel-3 DMA address register                 */
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  OTG_HS_HCCHAR4;               /*!< (@ 0x00000180) OTG_HS host channel-4 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT4;               /*!< (@ 0x00000184) OTG_HS host channel-4 split control register               */
  __IOM uint32_t  OTG_HS_HCINT4;                /*!< (@ 0x00000188) OTG_HS host channel-4 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK4;             /*!< (@ 0x0000018C) OTG_HS host channel-4 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ4;               /*!< (@ 0x00000190) OTG_HS host channel-4 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA4;                /*!< (@ 0x00000194) OTG_HS host channel-4 DMA address register                 */
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  OTG_HS_HCCHAR5;               /*!< (@ 0x000001A0) OTG_HS host channel-5 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT5;               /*!< (@ 0x000001A4) OTG_HS host channel-5 split control register               */
  __IOM uint32_t  OTG_HS_HCINT5;                /*!< (@ 0x000001A8) OTG_HS host channel-5 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK5;             /*!< (@ 0x000001AC) OTG_HS host channel-5 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ5;               /*!< (@ 0x000001B0) OTG_HS host channel-5 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA5;                /*!< (@ 0x000001B4) OTG_HS host channel-5 DMA address register                 */
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  OTG_HS_HCCHAR6;               /*!< (@ 0x000001C0) OTG_HS host channel-6 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT6;               /*!< (@ 0x000001C4) OTG_HS host channel-6 split control register               */
  __IOM uint32_t  OTG_HS_HCINT6;                /*!< (@ 0x000001C8) OTG_HS host channel-6 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK6;             /*!< (@ 0x000001CC) OTG_HS host channel-6 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ6;               /*!< (@ 0x000001D0) OTG_HS host channel-6 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA6;                /*!< (@ 0x000001D4) OTG_HS host channel-6 DMA address register                 */
  __IM  uint32_t  RESERVED9[2];
  __IOM uint32_t  OTG_HS_HCCHAR7;               /*!< (@ 0x000001E0) OTG_HS host channel-7 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT7;               /*!< (@ 0x000001E4) OTG_HS host channel-7 split control register               */
  __IOM uint32_t  OTG_HS_HCINT7;                /*!< (@ 0x000001E8) OTG_HS host channel-7 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK7;             /*!< (@ 0x000001EC) OTG_HS host channel-7 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ7;               /*!< (@ 0x000001F0) OTG_HS host channel-7 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA7;                /*!< (@ 0x000001F4) OTG_HS host channel-7 DMA address register                 */
  __IM  uint32_t  RESERVED10[2];
  __IOM uint32_t  OTG_HS_HCCHAR8;               /*!< (@ 0x00000200) OTG_HS host channel-8 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT8;               /*!< (@ 0x00000204) OTG_HS host channel-8 split control register               */
  __IOM uint32_t  OTG_HS_HCINT8;                /*!< (@ 0x00000208) OTG_HS host channel-8 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK8;             /*!< (@ 0x0000020C) OTG_HS host channel-8 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ8;               /*!< (@ 0x00000210) OTG_HS host channel-8 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA8;                /*!< (@ 0x00000214) OTG_HS host channel-8 DMA address register                 */
  __IM  uint32_t  RESERVED11[2];
  __IOM uint32_t  OTG_HS_HCCHAR9;               /*!< (@ 0x00000220) OTG_HS host channel-9 characteristics register             */
  __IOM uint32_t  OTG_HS_HCSPLT9;               /*!< (@ 0x00000224) OTG_HS host channel-9 split control register               */
  __IOM uint32_t  OTG_HS_HCINT9;                /*!< (@ 0x00000228) OTG_HS host channel-9 interrupt register                   */
  __IOM uint32_t  OTG_HS_HCINTMSK9;             /*!< (@ 0x0000022C) OTG_HS host channel-9 interrupt mask register              */
  __IOM uint32_t  OTG_HS_HCTSIZ9;               /*!< (@ 0x00000230) OTG_HS host channel-9 transfer size register               */
  __IOM uint32_t  OTG_HS_HCDMA9;                /*!< (@ 0x00000234) OTG_HS host channel-9 DMA address register                 */
  __IM  uint32_t  RESERVED12[2];
  __IOM uint32_t  OTG_HS_HCCHAR10;              /*!< (@ 0x00000240) OTG_HS host channel-10 characteristics register            */
  __IOM uint32_t  OTG_HS_HCSPLT10;              /*!< (@ 0x00000244) OTG_HS host channel-10 split control register              */
  __IOM uint32_t  OTG_HS_HCINT10;               /*!< (@ 0x00000248) OTG_HS host channel-10 interrupt register                  */
  __IOM uint32_t  OTG_HS_HCINTMSK10;            /*!< (@ 0x0000024C) OTG_HS host channel-10 interrupt mask register             */
  __IOM uint32_t  OTG_HS_HCTSIZ10;              /*!< (@ 0x00000250) OTG_HS host channel-10 transfer size register              */
  __IOM uint32_t  OTG_HS_HCDMA10;               /*!< (@ 0x00000254) OTG_HS host channel-10 DMA address register                */
  __IM  uint32_t  RESERVED13[2];
  __IOM uint32_t  OTG_HS_HCCHAR11;              /*!< (@ 0x00000260) OTG_HS host channel-11 characteristics register            */
  __IOM uint32_t  OTG_HS_HCSPLT11;              /*!< (@ 0x00000264) OTG_HS host channel-11 split control register              */
  __IOM uint32_t  OTG_HS_HCINT11;               /*!< (@ 0x00000268) OTG_HS host channel-11 interrupt register                  */
  __IOM uint32_t  OTG_HS_HCINTMSK11;            /*!< (@ 0x0000026C) OTG_HS host channel-11 interrupt mask register             */
  __IOM uint32_t  OTG_HS_HCTSIZ11;              /*!< (@ 0x00000270) OTG_HS host channel-11 transfer size register              */
  __IOM uint32_t  OTG_HS_HCDMA11;               /*!< (@ 0x00000274) OTG_HS host channel-11 DMA address register                */
} OTG_HS_HOST_Type;                             /*!< Size = 632 (0x278)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x40040800) OTG_HS_DEVICE Structure                                    */
  __IOM uint32_t  OTG_HS_DCFG;                  /*!< (@ 0x00000000) OTG_HS device configuration register                       */
  __IOM uint32_t  OTG_HS_DCTL;                  /*!< (@ 0x00000004) OTG_HS device control register                             */
  __IM  uint32_t  OTG_HS_DSTS;                  /*!< (@ 0x00000008) OTG_HS device status register                              */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  OTG_HS_DIEPMSK;               /*!< (@ 0x00000010) OTG_HS device IN endpoint common interrupt mask
                                                                    register                                                   */
  __IOM uint32_t  OTG_HS_DOEPMSK;               /*!< (@ 0x00000014) OTG_HS device OUT endpoint common interrupt mask
                                                                    register                                                   */
  __IM  uint32_t  OTG_HS_DAINT;                 /*!< (@ 0x00000018) OTG_HS device all endpoints interrupt register             */
  __IOM uint32_t  OTG_HS_DAINTMSK;              /*!< (@ 0x0000001C) OTG_HS all endpoints interrupt mask register               */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  OTG_HS_DVBUSDIS;              /*!< (@ 0x00000028) OTG_HS device VBUS discharge time register                 */
  __IOM uint32_t  OTG_HS_DVBUSPULSE;            /*!< (@ 0x0000002C) OTG_HS device VBUS pulsing time register                   */
  __IOM uint32_t  OTG_HS_DTHRCTL;               /*!< (@ 0x00000030) OTG_HS Device threshold control register                   */
  __IOM uint32_t  OTG_HS_DIEPEMPMSK;            /*!< (@ 0x00000034) OTG_HS device IN endpoint FIFO empty interrupt
                                                                    mask register                                              */
  __IOM uint32_t  OTG_HS_DEACHINT;              /*!< (@ 0x00000038) OTG_HS device each endpoint interrupt register             */
  __IOM uint32_t  OTG_HS_DEACHINTMSK;           /*!< (@ 0x0000003C) OTG_HS device each endpoint interrupt register
                                                                    mask                                                       */
  __IOM uint32_t  OTG_HS_DIEPEACHMSK1;          /*!< (@ 0x00000040) OTG_HS device each in endpoint-1 interrupt register        */
  __IM  uint32_t  RESERVED2[15];
  __IOM uint32_t  OTG_HS_DOEPEACHMSK1;          /*!< (@ 0x00000080) OTG_HS device each OUT endpoint-1 interrupt register       */
  __IM  uint32_t  RESERVED3[31];
  __IOM uint32_t  OTG_HS_DIEPCTL0;              /*!< (@ 0x00000100) OTG device endpoint-0 control register                     */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  OTG_HS_DIEPINT0;              /*!< (@ 0x00000108) OTG device endpoint-0 interrupt register                   */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  OTG_HS_DIEPTSIZ0;             /*!< (@ 0x00000110) OTG_HS device IN endpoint 0 transfer size register         */
  __IOM uint32_t  OTG_HS_DIEPDMA1;              /*!< (@ 0x00000114) OTG_HS device endpoint-1 DMA address register              */
  __IM  uint32_t  OTG_HS_DTXFSTS0;              /*!< (@ 0x00000118) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  OTG_HS_DIEPCTL1;              /*!< (@ 0x00000120) OTG device endpoint-1 control register                     */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  OTG_HS_DIEPINT1;              /*!< (@ 0x00000128) OTG device endpoint-1 interrupt register                   */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  OTG_HS_DIEPTSIZ1;             /*!< (@ 0x00000130) OTG_HS device endpoint transfer size register              */
  __IOM uint32_t  OTG_HS_DIEPDMA2;              /*!< (@ 0x00000134) OTG_HS device endpoint-2 DMA address register              */
  __IM  uint32_t  OTG_HS_DTXFSTS1;              /*!< (@ 0x00000138) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  OTG_HS_DIEPCTL2;              /*!< (@ 0x00000140) OTG device endpoint-2 control register                     */
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  OTG_HS_DIEPINT2;              /*!< (@ 0x00000148) OTG device endpoint-2 interrupt register                   */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  OTG_HS_DIEPTSIZ2;             /*!< (@ 0x00000150) OTG_HS device endpoint transfer size register              */
  __IOM uint32_t  OTG_HS_DIEPDMA3;              /*!< (@ 0x00000154) OTG_HS device endpoint-3 DMA address register              */
  __IM  uint32_t  OTG_HS_DTXFSTS2;              /*!< (@ 0x00000158) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  OTG_HS_DIEPCTL3;              /*!< (@ 0x00000160) OTG device endpoint-3 control register                     */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  OTG_HS_DIEPINT3;              /*!< (@ 0x00000168) OTG device endpoint-3 interrupt register                   */
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  OTG_HS_DIEPTSIZ3;             /*!< (@ 0x00000170) OTG_HS device endpoint transfer size register              */
  __IOM uint32_t  OTG_HS_DIEPDMA4;              /*!< (@ 0x00000174) OTG_HS device endpoint-4 DMA address register              */
  __IM  uint32_t  OTG_HS_DTXFSTS3;              /*!< (@ 0x00000178) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  OTG_HS_DIEPCTL4;              /*!< (@ 0x00000180) OTG device endpoint-4 control register                     */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  OTG_HS_DIEPINT4;              /*!< (@ 0x00000188) OTG device endpoint-4 interrupt register                   */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  OTG_HS_DIEPTSIZ4;             /*!< (@ 0x00000190) OTG_HS device endpoint transfer size register              */
  __IOM uint32_t  OTG_HS_DIEPDMA5;              /*!< (@ 0x00000194) OTG_HS device endpoint-5 DMA address register              */
  __IM  uint32_t  OTG_HS_DTXFSTS4;              /*!< (@ 0x00000198) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED18;
  __IOM uint32_t  OTG_HS_DIEPCTL5;              /*!< (@ 0x000001A0) OTG device endpoint-5 control register                     */
  __IM  uint32_t  RESERVED19;
  __IOM uint32_t  OTG_HS_DIEPINT5;              /*!< (@ 0x000001A8) OTG device endpoint-5 interrupt register                   */
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  OTG_HS_DIEPTSIZ5;             /*!< (@ 0x000001B0) OTG_HS device endpoint transfer size register              */
  __IM  uint32_t  RESERVED21;
  __IM  uint32_t  OTG_HS_DTXFSTS5;              /*!< (@ 0x000001B8) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
  __IM  uint32_t  RESERVED22;
  __IOM uint32_t  OTG_HS_DIEPCTL6;              /*!< (@ 0x000001C0) OTG device endpoint-6 control register                     */
  __IM  uint32_t  RESERVED23;
  __IOM uint32_t  OTG_HS_DIEPINT6;              /*!< (@ 0x000001C8) OTG device endpoint-6 interrupt register                   */
  __IM  uint32_t  RESERVED24[5];
  __IOM uint32_t  OTG_HS_DIEPCTL7;              /*!< (@ 0x000001E0) OTG device endpoint-7 control register                     */
  __IM  uint32_t  RESERVED25;
  __IOM uint32_t  OTG_HS_DIEPINT7;              /*!< (@ 0x000001E8) OTG device endpoint-7 interrupt register                   */
  __IM  uint32_t  RESERVED26[69];
  __IOM uint32_t  OTG_HS_DOEPCTL0;              /*!< (@ 0x00000300) OTG_HS device control OUT endpoint 0 control
                                                                    register                                                   */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  OTG_HS_DOEPINT0;              /*!< (@ 0x00000308) OTG_HS device endpoint-0 interrupt register                */
  __IM  uint32_t  RESERVED28;
  __IOM uint32_t  OTG_HS_DOEPTSIZ0;             /*!< (@ 0x00000310) OTG_HS device endpoint-1 transfer size register            */
  __IM  uint32_t  RESERVED29[3];
  __IOM uint32_t  OTG_HS_DOEPCTL1;              /*!< (@ 0x00000320) OTG device endpoint-1 control register                     */
  __IM  uint32_t  RESERVED30;
  __IOM uint32_t  OTG_HS_DOEPINT1;              /*!< (@ 0x00000328) OTG_HS device endpoint-1 interrupt register                */
  __IM  uint32_t  RESERVED31;
  __IOM uint32_t  OTG_HS_DOEPTSIZ1;             /*!< (@ 0x00000330) OTG_HS device endpoint-2 transfer size register            */
  __IM  uint32_t  RESERVED32[3];
  __IOM uint32_t  OTG_HS_DOEPCTL2;              /*!< (@ 0x00000340) OTG device endpoint-2 control register                     */
  __IM  uint32_t  RESERVED33;
  __IOM uint32_t  OTG_HS_DOEPINT2;              /*!< (@ 0x00000348) OTG_HS device endpoint-2 interrupt register                */
  __IM  uint32_t  RESERVED34;
  __IOM uint32_t  OTG_HS_DOEPTSIZ2;             /*!< (@ 0x00000350) OTG_HS device endpoint-3 transfer size register            */
  __IM  uint32_t  RESERVED35[3];
  __IOM uint32_t  OTG_HS_DOEPCTL3;              /*!< (@ 0x00000360) OTG device endpoint-3 control register                     */
  __IM  uint32_t  RESERVED36;
  __IOM uint32_t  OTG_HS_DOEPINT3;              /*!< (@ 0x00000368) OTG_HS device endpoint-3 interrupt register                */
  __IM  uint32_t  RESERVED37;
  __IOM uint32_t  OTG_HS_DOEPTSIZ3;             /*!< (@ 0x00000370) OTG_HS device endpoint-4 transfer size register            */
  __IM  uint32_t  RESERVED38[5];
  __IOM uint32_t  OTG_HS_DOEPINT4;              /*!< (@ 0x00000388) OTG_HS device endpoint-4 interrupt register                */
  __IM  uint32_t  RESERVED39;
  __IOM uint32_t  OTG_HS_DOEPTSIZ4;             /*!< (@ 0x00000390) OTG_HS device endpoint-5 transfer size register            */
  __IM  uint32_t  RESERVED40[5];
  __IOM uint32_t  OTG_HS_DOEPINT5;              /*!< (@ 0x000003A8) OTG_HS device endpoint-5 interrupt register                */
  __IM  uint32_t  RESERVED41[7];
  __IOM uint32_t  OTG_HS_DOEPINT6;              /*!< (@ 0x000003C8) OTG_HS device endpoint-6 interrupt register                */
  __IM  uint32_t  RESERVED42[7];
  __IOM uint32_t  OTG_HS_DOEPINT7;              /*!< (@ 0x000003E8) OTG_HS device endpoint-7 interrupt register                */
} OTG_HS_DEVICE_Type;                           /*!< Size = 1004 (0x3ec)                                                       */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x40040E00) OTG_HS_PWRCLK Structure                                    */
  __IOM uint32_t  OTG_HS_PCGCR;                 /*!< (@ 0x00000000) Power and clock gating control register                    */
} OTG_HS_PWRCLK_Type;                           /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           LTDC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD-TFT Controller (LTDC)
  */

typedef struct {                                /*!< (@ 0x40016800) LTDC Structure                                             */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  SSCR;                         /*!< (@ 0x00000008) Synchronization Size Configuration Register                */
  __IOM uint32_t  BPCR;                         /*!< (@ 0x0000000C) Back Porch Configuration Register                          */
  __IOM uint32_t  AWCR;                         /*!< (@ 0x00000010) Active Width Configuration Register                        */
  __IOM uint32_t  TWCR;                         /*!< (@ 0x00000014) Total Width Configuration Register                         */
  __IOM uint32_t  GCR;                          /*!< (@ 0x00000018) Global Control Register                                    */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  SRCR;                         /*!< (@ 0x00000024) Shadow Reload Configuration Register                       */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  BCCR;                         /*!< (@ 0x0000002C) Background Color Configuration Register                    */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  IER;                          /*!< (@ 0x00000034) Interrupt Enable Register                                  */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000038) Interrupt Status Register                                  */
  __OM  uint32_t  ICR;                          /*!< (@ 0x0000003C) Interrupt Clear Register                                   */
  __IOM uint32_t  LIPCR;                        /*!< (@ 0x00000040) Line Interrupt Position Configuration Register             */
  __IM  uint32_t  CPSR;                         /*!< (@ 0x00000044) Current Position Status Register                           */
  __IM  uint32_t  CDSR;                         /*!< (@ 0x00000048) Current Display Status Register                            */
  __IM  uint32_t  RESERVED4[14];
  __IOM uint32_t  L1CR;                         /*!< (@ 0x00000084) Layerx Control Register                                    */
  __IOM uint32_t  L1WHPCR;                      /*!< (@ 0x00000088) Layerx Window Horizontal Position Configuration
                                                                    Register                                                   */
  __IOM uint32_t  L1WVPCR;                      /*!< (@ 0x0000008C) Layerx Window Vertical Position Configuration
                                                                    Register                                                   */
  __IOM uint32_t  L1CKCR;                       /*!< (@ 0x00000090) Layerx Color Keying Configuration Register                 */
  __IOM uint32_t  L1PFCR;                       /*!< (@ 0x00000094) Layerx Pixel Format Configuration Register                 */
  __IOM uint32_t  L1CACR;                       /*!< (@ 0x00000098) Layerx Constant Alpha Configuration Register               */
  __IOM uint32_t  L1DCCR;                       /*!< (@ 0x0000009C) Layerx Default Color Configuration Register                */
  __IOM uint32_t  L1BFCR;                       /*!< (@ 0x000000A0) Layerx Blending Factors Configuration Register             */
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  L1CFBAR;                      /*!< (@ 0x000000AC) Layerx Color Frame Buffer Address Register                 */
  __IOM uint32_t  L1CFBLR;                      /*!< (@ 0x000000B0) Layerx Color Frame Buffer Length Register                  */
  __IOM uint32_t  L1CFBLNR;                     /*!< (@ 0x000000B4) Layerx ColorFrame Buffer Line Number Register              */
  __IM  uint32_t  RESERVED6[3];
  __OM  uint32_t  L1CLUTWR;                     /*!< (@ 0x000000C4) Layerx CLUT Write Register                                 */
  __IM  uint32_t  RESERVED7[15];
  __IOM uint32_t  L2CR;                         /*!< (@ 0x00000104) Layerx Control Register                                    */
  __IOM uint32_t  L2WHPCR;                      /*!< (@ 0x00000108) Layerx Window Horizontal Position Configuration
                                                                    Register                                                   */
  __IOM uint32_t  L2WVPCR;                      /*!< (@ 0x0000010C) Layerx Window Vertical Position Configuration
                                                                    Register                                                   */
  __IOM uint32_t  L2CKCR;                       /*!< (@ 0x00000110) Layerx Color Keying Configuration Register                 */
  __IOM uint32_t  L2PFCR;                       /*!< (@ 0x00000114) Layerx Pixel Format Configuration Register                 */
  __IOM uint32_t  L2CACR;                       /*!< (@ 0x00000118) Layerx Constant Alpha Configuration Register               */
  __IOM uint32_t  L2DCCR;                       /*!< (@ 0x0000011C) Layerx Default Color Configuration Register                */
  __IOM uint32_t  L2BFCR;                       /*!< (@ 0x00000120) Layerx Blending Factors Configuration Register             */
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  L2CFBAR;                      /*!< (@ 0x0000012C) Layerx Color Frame Buffer Address Register                 */
  __IOM uint32_t  L2CFBLR;                      /*!< (@ 0x00000130) Layerx Color Frame Buffer Length Register                  */
  __IOM uint32_t  L2CFBLNR;                     /*!< (@ 0x00000134) Layerx ColorFrame Buffer Line Number Register              */
  __IM  uint32_t  RESERVED9[3];
  __OM  uint32_t  L2CLUTWR;                     /*!< (@ 0x00000144) Layerx CLUT Write Register                                 */
} LTDC_Type;                                    /*!< Size = 328 (0x148)                                                        */



/* =========================================================================================================================== */
/* ================                                            SAI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial audio interface (SAI)
  */

typedef struct {                                /*!< (@ 0x40015800) SAI Structure                                              */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  ACR1;                         /*!< (@ 0x00000004) AConfiguration register 1                                  */
  __IOM uint32_t  ACR2;                         /*!< (@ 0x00000008) AConfiguration register 2                                  */
  __IOM uint32_t  AFRCR;                        /*!< (@ 0x0000000C) AFRCR                                                      */
  __IOM uint32_t  ASLOTR;                       /*!< (@ 0x00000010) ASlot register                                             */
  __IOM uint32_t  AIM;                          /*!< (@ 0x00000014) AInterrupt mask register2                                  */
  __IOM uint32_t  ASR;                          /*!< (@ 0x00000018) AStatus register                                           */
  __IOM uint32_t  ACLRFR;                       /*!< (@ 0x0000001C) AClear flag register                                       */
  __IOM uint32_t  ADR;                          /*!< (@ 0x00000020) AData register                                             */
  __IOM uint32_t  BCR1;                         /*!< (@ 0x00000024) BConfiguration register 1                                  */
  __IOM uint32_t  BCR2;                         /*!< (@ 0x00000028) BConfiguration register 2                                  */
  __IOM uint32_t  BFRCR;                        /*!< (@ 0x0000002C) BFRCR                                                      */
  __IOM uint32_t  BSLOTR;                       /*!< (@ 0x00000030) BSlot register                                             */
  __IOM uint32_t  BIM;                          /*!< (@ 0x00000034) BInterrupt mask register2                                  */
  __IM  uint32_t  BSR;                          /*!< (@ 0x00000038) BStatus register                                           */
  __OM  uint32_t  BCLRFR;                       /*!< (@ 0x0000003C) BClear flag register                                       */
  __IOM uint32_t  BDR;                          /*!< (@ 0x00000040) BData register                                             */
} SAI_Type;                                     /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA2D                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA2D controller (DMA2D)
  */

typedef struct {                                /*!< (@ 0x4002B000) DMA2D Structure                                            */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000004) Interrupt Status Register                                  */
  __IOM uint32_t  IFCR;                         /*!< (@ 0x00000008) interrupt flag clear register                              */
  __IOM uint32_t  FGMAR;                        /*!< (@ 0x0000000C) foreground memory address register                         */
  __IOM uint32_t  FGOR;                         /*!< (@ 0x00000010) foreground offset register                                 */
  __IOM uint32_t  BGMAR;                        /*!< (@ 0x00000014) background memory address register                         */
  __IOM uint32_t  BGOR;                         /*!< (@ 0x00000018) background offset register                                 */
  __IOM uint32_t  FGPFCCR;                      /*!< (@ 0x0000001C) foreground PFC control register                            */
  __IOM uint32_t  FGCOLR;                       /*!< (@ 0x00000020) foreground color register                                  */
  __IOM uint32_t  BGPFCCR;                      /*!< (@ 0x00000024) background PFC control register                            */
  __IOM uint32_t  BGCOLR;                       /*!< (@ 0x00000028) background color register                                  */
  __IOM uint32_t  FGCMAR;                       /*!< (@ 0x0000002C) foreground CLUT memory address register                    */
  __IOM uint32_t  BGCMAR;                       /*!< (@ 0x00000030) background CLUT memory address register                    */
  __IOM uint32_t  OPFCCR;                       /*!< (@ 0x00000034) output PFC control register                                */
  __IOM uint32_t  OCOLR;                        /*!< (@ 0x00000038) output color register                                      */
  __IOM uint32_t  OMAR;                         /*!< (@ 0x0000003C) output memory address register                             */
  __IOM uint32_t  OOR;                          /*!< (@ 0x00000040) output offset register                                     */
  __IOM uint32_t  NLR;                          /*!< (@ 0x00000044) number of line register                                    */
  __IOM uint32_t  LWR;                          /*!< (@ 0x00000048) line watermark register                                    */
  __IOM uint32_t  AMTCR;                        /*!< (@ 0x0000004C) AHB master timer configuration register                    */
  __IM  uint32_t  RESERVED[236];
  __IOM uint32_t  FGCLUT;                       /*!< (@ 0x00000400) FGCLUT                                                     */
  __IM  uint32_t  RESERVED1[255];
  __IOM uint32_t  BGCLUT;                       /*!< (@ 0x00000800) BGCLUT                                                     */
} DMA2D_Type;                                   /*!< Size = 2052 (0x804)                                                       */



/* =========================================================================================================================== */
/* ================                                           I2C3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-integrated circuit (I2C3)
  */

typedef struct {                                /*!< (@ 0x40005C00) I2C3 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  OAR1;                         /*!< (@ 0x00000008) Own address register 1                                     */
  __IOM uint32_t  OAR2;                         /*!< (@ 0x0000000C) Own address register 2                                     */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000010) Data register                                              */
  __IOM uint32_t  SR1;                          /*!< (@ 0x00000014) Status register 1                                          */
  __IM  uint32_t  SR2;                          /*!< (@ 0x00000018) Status register 2                                          */
  __IOM uint32_t  CCR;                          /*!< (@ 0x0000001C) Clock control register                                     */
  __IOM uint32_t  TRISE;                        /*!< (@ 0x00000020) TRISE register                                             */
  __IOM uint32_t  FLTR;                         /*!< (@ 0x00000024) I2C FLTR register                                          */
} I2C3_Type;                                    /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                            FPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Floting point unit (FPU)
  */

typedef struct {                                /*!< (@ 0xE000EF34) FPU Structure                                              */
  __IOM uint32_t  FPCCR;                        /*!< (@ 0x00000000) Floating-point context control register                    */
  __IOM uint32_t  FPCAR;                        /*!< (@ 0x00000004) Floating-point context address register                    */
  __IOM uint32_t  FPSCR;                        /*!< (@ 0x00000008) Floating-point status control register                     */
} FPU_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory protection unit (MPU)
  */

typedef struct {                                /*!< (@ 0xE000ED90) MPU Structure                                              */
  __IM  uint32_t  MPU_TYPER;                    /*!< (@ 0x00000000) MPU type register                                          */
  __IM  uint32_t  MPU_CTRL;                     /*!< (@ 0x00000004) MPU control register                                       */
  __IOM uint32_t  MPU_RNR;                      /*!< (@ 0x00000008) MPU region number register                                 */
  __IOM uint32_t  MPU_RBAR;                     /*!< (@ 0x0000000C) MPU region base address register                           */
  __IOM uint32_t  MPU_RASR;                     /*!< (@ 0x00000010) MPU region attribute and size register                     */
} MPU_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            STK                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SysTick timer (STK)
  */

typedef struct {                                /*!< (@ 0xE000E010) STK Structure                                              */
  __IOM uint32_t  CTRL;                         /*!< (@ 0x00000000) SysTick control and status register                        */
  __IOM uint32_t  LOAD;                         /*!< (@ 0x00000004) SysTick reload value register                              */
  __IOM uint32_t  VAL;                          /*!< (@ 0x00000008) SysTick current value register                             */
  __IOM uint32_t  CALIB;                        /*!< (@ 0x0000000C) SysTick calibration value register                         */
} STK_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            SCB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block (SCB)
  */

typedef struct {                                /*!< (@ 0xE000ED00) SCB Structure                                              */
  __IM  uint32_t  CPUID;                        /*!< (@ 0x00000000) CPUID base register                                        */
  __IOM uint32_t  ICSR;                         /*!< (@ 0x00000004) Interrupt control and state register                       */
  __IOM uint32_t  VTOR;                         /*!< (@ 0x00000008) Vector table offset register                               */
  __IOM uint32_t  AIRCR;                        /*!< (@ 0x0000000C) Application interrupt and reset control register           */
  __IOM uint32_t  SCR;                          /*!< (@ 0x00000010) System control register                                    */
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000014) Configuration and control register                         */
  __IOM uint32_t  SHPR1;                        /*!< (@ 0x00000018) System handler priority registers                          */
  __IOM uint32_t  SHPR2;                        /*!< (@ 0x0000001C) System handler priority registers                          */
  __IOM uint32_t  SHPR3;                        /*!< (@ 0x00000020) System handler priority registers                          */
  __IOM uint32_t  SHCRS;                        /*!< (@ 0x00000024) System handler control and state register                  */
  __IOM uint32_t  CFSR_UFSR_BFSR_MMFSR;         /*!< (@ 0x00000028) Configurable fault status register                         */
  __IOM uint32_t  HFSR;                         /*!< (@ 0x0000002C) Hard fault status register                                 */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  MMFAR;                        /*!< (@ 0x00000034) Memory management fault address register                   */
  __IOM uint32_t  BFAR;                         /*!< (@ 0x00000038) Bus fault address register                                 */
  __IOM uint32_t  AFSR;                         /*!< (@ 0x0000003C) Auxiliary fault status register                            */
} SCB_Type;                                     /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                         NVIC_STIR                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested vectored interrupt  controller (NVIC_STIR)
  */

typedef struct {                                /*!< (@ 0xE000EF00) NVIC_STIR Structure                                        */
  __IOM uint32_t  STIR;                         /*!< (@ 0x00000000) Software trigger interrupt register                        */
} NVIC_STIR_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         FPU_CPACR                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Floating point unit CPACR (FPU_CPACR)
  */

typedef struct {                                /*!< (@ 0xE000ED88) FPU_CPACR Structure                                        */
  __IOM uint32_t  CPACR;                        /*!< (@ 0x00000000) Coprocessor access control register                        */
} FPU_CPACR_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         SCB_ACTRL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block ACTLR (SCB_ACTRL)
  */

typedef struct {                                /*!< (@ 0xE000E008) SCB_ACTRL Structure                                        */
  __IOM uint32_t  ACTRL;                        /*!< (@ 0x00000000) Auxiliary control register                                 */
} SCB_ACTRL_Type;                               /*!< Size = 4 (0x4)                                                            */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define RNG_BASE                    0x50060800UL
#define HASH_BASE                   0x50060400UL
#define CRYP_BASE                   0x50060000UL
#define DCMI_BASE                   0x50050000UL
#define FMC_BASE                    0xA0000000UL
#define DBG_BASE                    0xE0042000UL
#define DMA2_BASE                   0x40026400UL
#define DMA1_BASE                   0x40026000UL
#define RCC_BASE                    0x40023800UL
#define GPIOK_BASE                  0x40022800UL
#define GPIOJ_BASE                  0x40022400UL
#define GPIOI_BASE                  0x40022000UL
#define GPIOH_BASE                  0x40021C00UL
#define GPIOG_BASE                  0x40021800UL
#define GPIOF_BASE                  0x40021400UL
#define GPIOE_BASE                  0x40021000UL
#define GPIOD_BASE                  0x40020C00UL
#define GPIOC_BASE                  0x40020800UL
#define GPIOB_BASE                  0x40020400UL
#define GPIOA_BASE                  0x40020000UL
#define SYSCFG_BASE                 0x40013800UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define SPI3_BASE                   0x40003C00UL
#define I2S2ext_BASE                0x40003400UL
#define I2S3ext_BASE                0x40004000UL
#define SPI4_BASE                   0x40013400UL
#define SPI5_BASE                   0x40015000UL
#define SPI6_BASE                   0x40015400UL
#define SDIO_BASE                   0x40012C00UL
#define ADC1_BASE                   0x40012000UL
#define ADC2_BASE                   0x40012100UL
#define ADC3_BASE                   0x40012200UL
#define USART6_BASE                 0x40011400UL
#define USART1_BASE                 0x40011000UL
#define USART2_BASE                 0x40004400UL
#define USART3_BASE                 0x40004800UL
#define UART7_BASE                  0x40007800UL
#define UART8_BASE                  0x40007C00UL
#define DAC_BASE                    0x40007400UL
#define PWR_BASE                    0x40007000UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define RTC_BASE                    0x40002800UL
#define UART4_BASE                  0x40004C00UL
#define UART5_BASE                  0x40005000UL
#define C_ADC_BASE                  0x40012300UL
#define TIM1_BASE                   0x40010000UL
#define TIM8_BASE                   0x40010400UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM4_BASE                   0x40000800UL
#define TIM5_BASE                   0x40000C00UL
#define TIM9_BASE                   0x40014000UL
#define TIM12_BASE                  0x40001800UL
#define TIM10_BASE                  0x40014400UL
#define TIM13_BASE                  0x40001C00UL
#define TIM14_BASE                  0x40002000UL
#define TIM11_BASE                  0x40014800UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define Ethernet_MAC_BASE           0x40028000UL
#define Ethernet_MMC_BASE           0x40028100UL
#define Ethernet_PTP_BASE           0x40028700UL
#define Ethernet_DMA_BASE           0x40029000UL
#define CRC_BASE                    0x40023000UL
#define OTG_FS_GLOBAL_BASE          0x50000000UL
#define OTG_FS_HOST_BASE            0x50000400UL
#define OTG_FS_DEVICE_BASE          0x50000800UL
#define OTG_FS_PWRCLK_BASE          0x50000E00UL
#define CAN1_BASE                   0x40006400UL
#define CAN2_BASE                   0x40006800UL
#define NVIC_BASE                   0xE000E100UL
#define FLASH_BASE                  0x40023C00UL
#define EXTI_BASE                   0x40013C00UL
#define OTG_HS_GLOBAL_BASE          0x40040000UL
#define OTG_HS_HOST_BASE            0x40040400UL
#define OTG_HS_DEVICE_BASE          0x40040800UL
#define OTG_HS_PWRCLK_BASE          0x40040E00UL
#define LTDC_BASE                   0x40016800UL
#define SAI_BASE                    0x40015800UL
#define DMA2D_BASE                  0x4002B000UL
#define I2C3_BASE                   0x40005C00UL
#define I2C2_BASE                   0x40005800UL
#define I2C1_BASE                   0x40005400UL
#define FPU_BASE                    0xE000EF34UL
#define MPU_BASE                    0xE000ED90UL
#define STK_BASE                    0xE000E010UL
#define SCB_BASE                    0xE000ED00UL
#define NVIC_STIR_BASE              0xE000EF00UL
#define FPU_CPACR_BASE              0xE000ED88UL
#define SCB_ACTRL_BASE              0xE000E008UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define RNG                         ((RNG_Type*)               RNG_BASE)
#define HASH                        ((HASH_Type*)              HASH_BASE)
#define CRYP                        ((CRYP_Type*)              CRYP_BASE)
#define DCMI                        ((DCMI_Type*)              DCMI_BASE)
#define FMC                         ((FMC_Type*)               FMC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define DMA2                        ((DMA2_Type*)              DMA2_BASE)
#define DMA1                        ((DMA2_Type*)              DMA1_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define GPIOK                       ((GPIOK_Type*)             GPIOK_BASE)
#define GPIOJ                       ((GPIOK_Type*)             GPIOJ_BASE)
#define GPIOI                       ((GPIOK_Type*)             GPIOI_BASE)
#define GPIOH                       ((GPIOK_Type*)             GPIOH_BASE)
#define GPIOG                       ((GPIOK_Type*)             GPIOG_BASE)
#define GPIOF                       ((GPIOK_Type*)             GPIOF_BASE)
#define GPIOE                       ((GPIOK_Type*)             GPIOE_BASE)
#define GPIOD                       ((GPIOK_Type*)             GPIOD_BASE)
#define GPIOC                       ((GPIOK_Type*)             GPIOC_BASE)
#define GPIOB                       ((GPIOB_Type*)             GPIOB_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define SYSCFG                      ((SYSCFG_Type*)            SYSCFG_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define SPI3                        ((SPI1_Type*)              SPI3_BASE)
#define I2S2ext                     ((SPI1_Type*)              I2S2ext_BASE)
#define I2S3ext                     ((SPI1_Type*)              I2S3ext_BASE)
#define SPI4                        ((SPI1_Type*)              SPI4_BASE)
#define SPI5                        ((SPI1_Type*)              SPI5_BASE)
#define SPI6                        ((SPI1_Type*)              SPI6_BASE)
#define SDIO                        ((SDIO_Type*)              SDIO_BASE)
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC1_Type*)              ADC2_BASE)
#define ADC3                        ((ADC1_Type*)              ADC3_BASE)
#define USART6                      ((USART6_Type*)            USART6_BASE)
#define USART1                      ((USART6_Type*)            USART1_BASE)
#define USART2                      ((USART6_Type*)            USART2_BASE)
#define USART3                      ((USART6_Type*)            USART3_BASE)
#define UART7                       ((USART6_Type*)            UART7_BASE)
#define UART8                       ((USART6_Type*)            UART8_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define UART4                       ((UART4_Type*)             UART4_BASE)
#define UART5                       ((UART4_Type*)             UART5_BASE)
#define C_ADC                       ((C_ADC_Type*)             C_ADC_BASE)
#define TIM1                        ((TIM1_Type*)              TIM1_BASE)
#define TIM8                        ((TIM1_Type*)              TIM8_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define TIM3                        ((TIM3_Type*)              TIM3_BASE)
#define TIM4                        ((TIM3_Type*)              TIM4_BASE)
#define TIM5                        ((TIM5_Type*)              TIM5_BASE)
#define TIM9                        ((TIM9_Type*)              TIM9_BASE)
#define TIM12                       ((TIM9_Type*)              TIM12_BASE)
#define TIM10                       ((TIM10_Type*)             TIM10_BASE)
#define TIM13                       ((TIM10_Type*)             TIM13_BASE)
#define TIM14                       ((TIM10_Type*)             TIM14_BASE)
#define TIM11                       ((TIM11_Type*)             TIM11_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define Ethernet_MAC                ((Ethernet_MAC_Type*)      Ethernet_MAC_BASE)
#define Ethernet_MMC                ((Ethernet_MMC_Type*)      Ethernet_MMC_BASE)
#define Ethernet_PTP                ((Ethernet_PTP_Type*)      Ethernet_PTP_BASE)
#define Ethernet_DMA                ((Ethernet_DMA_Type*)      Ethernet_DMA_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define OTG_FS_GLOBAL               ((OTG_FS_GLOBAL_Type*)     OTG_FS_GLOBAL_BASE)
#define OTG_FS_HOST                 ((OTG_FS_HOST_Type*)       OTG_FS_HOST_BASE)
#define OTG_FS_DEVICE               ((OTG_FS_DEVICE_Type*)     OTG_FS_DEVICE_BASE)
#define OTG_FS_PWRCLK               ((OTG_FS_PWRCLK_Type*)     OTG_FS_PWRCLK_BASE)
#define CAN1                        ((CAN1_Type*)              CAN1_BASE)
#define CAN2                        ((CAN1_Type*)              CAN2_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define OTG_HS_GLOBAL               ((OTG_HS_GLOBAL_Type*)     OTG_HS_GLOBAL_BASE)
#define OTG_HS_HOST                 ((OTG_HS_HOST_Type*)       OTG_HS_HOST_BASE)
#define OTG_HS_DEVICE               ((OTG_HS_DEVICE_Type*)     OTG_HS_DEVICE_BASE)
#define OTG_HS_PWRCLK               ((OTG_HS_PWRCLK_Type*)     OTG_HS_PWRCLK_BASE)
#define LTDC                        ((LTDC_Type*)              LTDC_BASE)
#define SAI                         ((SAI_Type*)               SAI_BASE)
#define DMA2D                       ((DMA2D_Type*)             DMA2D_BASE)
#define I2C3                        ((I2C3_Type*)              I2C3_BASE)
#define I2C2                        ((I2C3_Type*)              I2C2_BASE)
#define I2C1                        ((I2C3_Type*)              I2C1_BASE)
#define FPU                         ((FPU_Type*)               FPU_BASE)
#define MPU                         ((MPU_Type*)               MPU_BASE)
#define STK                         ((STK_Type*)               STK_BASE)
#define SCB                         ((SCB_Type*)               SCB_BASE)
#define NVIC_STIR                   ((NVIC_STIR_Type*)         NVIC_STIR_BASE)
#define FPU_CPACR                   ((FPU_CPACR_Type*)         FPU_CPACR_BASE)
#define SCB_ACTRL                   ((SCB_ACTRL_Type*)         SCB_ACTRL_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* STM32F429_H */


/** @} */ /* End of group STM32F429 */

/** @} */ /* End of group  */
